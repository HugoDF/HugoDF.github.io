---
layout: post
title: "Hacking in vanilla javascript"
date:   2015-02-09 18:46:11
categories: javascript plugin
---
Second post on here, I don't know what's wrong with me lately, people give me projects and I end up writing plugins. We want a slideshow demo page, let's write it out in jQuery/CSS transitions. We want a lightweight holding page system: let's roll vanilla js and sass. I don't know where the frameworks and plugins went, but I think I should bring them back, it's all nice and dandy hacking jQuery for 6 hours, and then being told the requirements have changed and that a plugin would have completely filled them... Thankfully, this didn't happen, I've also been looking at automating even more stuff, moving away from just grunt tasks to copy/compile/compress assets to going all-out and generating models/views/controllers ala Ember CLI or [SANE CLI](http://sanestack.com/).

I think I'm actually just liking this whole convention over configuration thing, easy generation, should probably look into the guy who sparked it all, Ruby on Rails, which I looked into a while ago, creating the most amazing CRUD blog app <strong>ever</strong> in the process. Keystone.js is actually my goto along with Laravel, depending on where/how the thing needs to be hosted and if it needs nice SQL, table-driven models or more quickly put together, fast-changing, mongoose schemas. Ie if the client knows what he/she wants and it's a full-blown custom system, got for Laravel. If he/she doesn't, or the requirements are for a blog-style, CMS thing where the models mostly require text, images etc.. etc.. go for keystone.js. 

Last and third option that doesn't really fit the question but will be written anyways: someone wants fast load times (I mean crazy fast), and highly simplified system for a single page demo. Go Vanilla everything... well not quite. Dump the CSS framework, dump the jQuery (turns out this might have been a step too far), dump the sass? Not necessary! Thankfully pre-processed css turns into css meaning there's no way to simplify it further. Maybe I could have used MinCSS instead of going all out vanilla Sass/JS. It reminds of writing a vanillaJS menubar system I made as part of some WordPress updates I was doing... wasn't too bad, except it wouldn't display properly when you were logged into WordPress, there was no local environment, you had to click around the interface instead of using <code>CMD+P</code> like Sublime Text lets you do. 

Generally that was more WordPress acting up and me not being used to developing painfully slowly. Rather than a JS/CSS being less useful than jQuery/Sass... which in essence it should be, isn't the point of packing everything into nicer packages/modules/frameworks to improve productivity? A slightly less efficient program is probably worth the developer hours saved, <strong>but</strong> there are use-cases where ditching jQuery/CSS framework is worth it, maybe time-critical page loads ala Google and single page demos? Yes I would say so.

I won't go into a WordPress tangent this time, though it could come up should I work more on it and you know what? I may just end up forgiving its shortcomings for the value it brought into the blogging sphere but perhaps it shouldn't always be the goto CMS/Framework especially for agency work, WordPress is inefficient when you have efficient programmers who don't specialise in it (so just PHP or frontend devs) and who have set up workflows that go faster on other frameworks (notably MVC ones) then again, client is king, if you want WordPress, we might not enjoy it as much as using some pre-release unstable build of some <code>*.js</code> thing but we will get the job done.