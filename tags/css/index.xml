<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/css/</link>
    <description>Recent content in Css on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 05 Jul 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Responsive, semantic images with CSS</title>
      <link>https://codewithhugo.com/responsive-semantic-images-with-css/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/responsive-semantic-images-with-css/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;CSS tip: &lt;code&gt;object-fit&lt;/code&gt; your images.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To have an image that doesn&amp;rsquo;t try to stretch to its width/height the classic CSS is as follows:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;thumbnail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;cover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background-position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this associated HTML (inline styles‚Ä¶ üëé):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;background-image: url(&amp;#39;some-url&amp;#39;);&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;thumbnail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;object-fit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;cover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;object-position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the following HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;some-url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This was sent out on the &lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Code with Hugo newsletter&lt;/a&gt; last Monday.
&lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Subscribe&lt;/a&gt; to get the latest posts right in your inbox (before anyone else).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;why-is-this-cool&#34;&gt;Why is this cool?&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;One word: accessibility.&lt;/li&gt;
&lt;li&gt;Two words: semantic markup.&lt;/li&gt;
&lt;li&gt;Many words, with the &lt;code&gt;div&lt;/code&gt; + &lt;code&gt;background-image&lt;/code&gt; solution:

&lt;ol&gt;
&lt;li&gt;if the URL turned out to be broken, it would show empty space, with the &lt;code&gt;img&lt;/code&gt; + &lt;code&gt;object-fit&lt;/code&gt; one, it shows the good old ‚Äúbroken image because of URL‚Äù fallback (or &lt;code&gt;alt&lt;/code&gt; attribute value).&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;img&lt;/code&gt; tag is more accessible since we can have &lt;code&gt;alt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Typing &lt;code&gt;src=&amp;quot;my-url&amp;quot;&lt;/code&gt; is just less characters than  &lt;code&gt;style=&amp;quot;background-image: url(&#39;my-url&#39;)&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Warning: this might not work on older browsers, it does, however gracefully degrade (the image will just be stretched), it won&amp;rsquo;t mess up the layout though.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@n8bell34?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Nate Bell&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Nate Bell&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Animations: CSS vs JavaScript</title>
      <link>https://codewithhugo.com/animations-css-vs-javascript/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/animations-css-vs-javascript/</guid>
      <description>

&lt;h3 id=&#34;when-should-you-use-javascript-when-you-can-use-css&#34;&gt;&lt;em&gt;When should you use JavaScript when you can use CSS?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This post was sparked by a question I answered on Quora:
&lt;a href=&#34;https://www.quora.com/Which-is-better-to-use-CSS-or-JS&#34;&gt;&lt;strong&gt;Which is better to use, CSS or JS?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web frontend is built with the triumvirate of HTML, CSS and JavaScript (see &lt;a href=&#34;https://hackernoon.com/in-simple-terms-backend-code-frontend-code-and-how-they-interact-2485c5a1bbd2&#34;&gt;‚ÄúBackend code, frontend code and how they interact‚Äù&lt;/a&gt; for more details): HTML says what things are, CSS how they look and JavaScript does all the things the other two can‚Äôt.&lt;/p&gt;

&lt;p&gt;Seeing it from this light the answer to the question: ‚ÄúWhen should you use JavaScript when you can use CSS?‚Äù is &lt;strong&gt;never&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;HTML, CSS and JavaScript do overlap especially since HTML5 and CSS3. Animations before CSS3 used to be the premise of the JavaScript and complex animation orchestration still is with libraries like GSAP, but nowadays we can also animate using the transition CSS rule.&lt;/p&gt;

&lt;p&gt;This leads us to formulate some rules around using JavaScript in the browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if you can do something with CSS over JavaScript, do it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if you can do something with HTML over JavaScript, do it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;There are a few reasons why you should try to leverage the browser‚Äôs CSS engine instead of hand-rolling animations, focused states and so on.&lt;/p&gt;

&lt;p&gt;This stems from the principle of writing code that is as simple as possible, but not too simple. CSS and HTML‚Äôs declarative natures lends them to writing concise, robust and maintainable code. Since JavaScript can do so much and break so many different ways, the less of it you write, the less likely you are to run into issues.&lt;/p&gt;

&lt;h2 id=&#34;1-resilience&#34;&gt;1. Resilience&lt;/h2&gt;

&lt;p&gt;CSS and HTML try their hardest to self-remedy. They‚Äôre super robust: one broken CSS rule doesn‚Äôt crash your whole web-app, a missing tag might break your layout but except in extreme cases it won‚Äôt stop your site from loading.&lt;/p&gt;

&lt;p&gt;One JavaScript syntax error or a missing null/undefined check on a field before using it (eg. myObj.something when myObj is null/undefined) will crash your whole app, forcing your user to refresh the whole thing and possibly losing some work in the process.&lt;/p&gt;

&lt;h2 id=&#34;2-optimisation&#34;&gt;2. Optimisation&lt;/h2&gt;

&lt;p&gt;Since CSS is declarative there is a lot more scope for optimisation. The browser can sometimes use hardware acceleration to do CSS things.&lt;/p&gt;

&lt;p&gt;It can also optimise things like not computing off-screen element‚Äôs styles or run their animations.&lt;/p&gt;

&lt;p&gt;JavaScript doesn‚Äôt have access to these kinds of APIs out of the box.&lt;/p&gt;

&lt;h2 id=&#34;3-easy-and-costly-to-get-wrong&#34;&gt;3. Easy and costly to get wrong&lt;/h2&gt;

&lt;p&gt;Beyond the fact that JavaScript is less resilient than CSS, even relatively well-written JavaScript can do things like locking the UI or even crash the browser (especially low-end ones).&lt;/p&gt;

&lt;p&gt;With CSS, non-CSS3 compliant browsers aka pretty-damn-old-browser-that-you-dont-use-any-more-but-your-users-mightwill just ignore the transition rule, so &lt;em&gt;by default&lt;/em&gt; you have graceful degradation. In JavaScript you would have to detect that the user is running old or low-spec hardware, making it an &lt;em&gt;opt-in&lt;/em&gt; to graceful degradation‚Ä¶ I know which one I prefer.&lt;/p&gt;

&lt;h2 id=&#34;4-cost-of-javascript&#34;&gt;4. Cost of JavaScript&lt;/h2&gt;

&lt;p&gt;A whole lot more sites need CSS more than they need JavaScript. That‚Äôs why despite ‚ÄúBest Practices‚Äù a lot of developers (a lot = ‚ÄúI‚Äôm guilty of this‚Äù), still load their styles in the head even though they load their scripts at the end of the body.&lt;/p&gt;

&lt;p&gt;CSS is also quite cheap to interpret since it‚Äôs declarative, you can parallelise the creation of the in-memory representation of styles (since each selector in the CSS can be interpreted in parallel) and also defer calculation of the final styles until when the elements are painted.&lt;/p&gt;

&lt;p&gt;JavaScript, since it‚Äôs a general purpose programming language‚Ä¶ just like CSS has to be loaded, but it also has to be parsed and JIT-compiled as well as run. Which means for the same amount (in terms of size on disk) of CSS and JavaScript, JavaScript costs more to your users in terms of hardware time.&lt;/p&gt;

&lt;h2 id=&#34;5-cost-of-maintenance-and-added-dependencies&#34;&gt;5. Cost of maintenance and added dependencies&lt;/h2&gt;

&lt;p&gt;Loading in a JavaScript animation library costs you in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;you‚Äôre adding a dependency with its own API, which means potentially more things to learn for anyone looking to maintain the code after you&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you‚Äôre loading a dependency, adding to your JavaScript load/parse/run startup cost&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS animations and detecting DOM state using pseudo-classes costs you nothing both in terms of loading and not incurring a dependency since CSS and HTML are backed by web standards. It‚Äôs very likely any new developers will be familiar with CSS animations, and if they‚Äôre not, they should be.&lt;/p&gt;

&lt;p&gt;Feel free to get in touch with me on Twitter &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leave some üëèüèª if you enjoyed this, and here are some posts you might be interested in:
- &lt;a href=&#34;https://medium.com/@hugo__df/why-css-is-hard-89f3b221dd4d&#34;&gt;&lt;strong&gt;Why CSS is hard&lt;/strong&gt;, Things we‚Äôre not used to tend to be harder&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://hackernoon.com/learn-git-even-if-you-dont-code-89c521f4209b&#34;&gt;&lt;strong&gt;Learn git even if you don‚Äôt code&lt;/strong&gt;, The tools we wield define us, git is the one tool all developers use&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://medium.com/@hugo__df/7-reasons-you-should-be-hosted-on-aws-9312e40ee323&#34;&gt;&lt;strong&gt;7 reasons you should be hosted on AWS&lt;/strong&gt;, Amazon Web Services is one of the leading hosting providers, here‚Äôs why.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why CSS is hard</title>
      <link>https://codewithhugo.com/why-css-is-hard/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/why-css-is-hard/</guid>
      <description>

&lt;p&gt;Things we‚Äôre not used to tend to be harder&lt;/p&gt;

&lt;p&gt;I‚Äôm a developer, and I CSS. I probably have written more CSS than I have written Java, Ruby, PHP, Python and JavaScript combined.&lt;/p&gt;

&lt;p&gt;Being a front-end developer is a dying art. By front-end I don‚Äôt mean ES6, Babelifyied React SPAs. I mean meat and potatoes: ‚Äúhere‚Äôs a design, turn it into a website please‚Äù.&lt;/p&gt;

&lt;p&gt;CSS doesn‚Äôt get the love it deserves in the developer crowd. I think I know why that is: it‚Äôs hard. Especially coming from the fairy land that is Java/JavaScript/Ruby/PHP/&lt;em&gt;insert language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now I‚Äôm not saying all these languages are &lt;em&gt;easy&lt;/em&gt; by any stretch but CSS always throws up issues that stump me‚Ä¶ for a good while.&lt;/p&gt;

&lt;h3 id=&#34;1-the-difficulty-of-a-declarative-language&#34;&gt;1. The difficulty of a declarative language&lt;/h3&gt;

&lt;p&gt;CSS is a &lt;strong&gt;purely*&lt;/strong&gt; *rule-based language. In a world where we write mainly Object-Oriented or procedural code, this does not sit comfortably. It‚Äôs just not the paradigm we‚Äôre used to.&lt;/p&gt;

&lt;p&gt;Developers tend to struggle going from procedural to object-oriented programming and from OO to functional programming.&lt;/p&gt;

&lt;p&gt;Changing paradigm means a change in mentality and that‚Äôs just not everyone‚Äôs cup of tea.&lt;/p&gt;

&lt;p&gt;In CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The rule declared last will take precedence.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The rule declared on the most specific selector takes precedence.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There aren‚Äôt any looping constructs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There aren‚Äôt any scoping constructs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is nothing like your Java, PHP, Ruby, C.&lt;/p&gt;

&lt;p&gt;Which brings us to the second strand of CSS issues.&lt;/p&gt;

&lt;h3 id=&#34;2-no-scopes&#34;&gt;2. No scopes&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;cs-101-avoid-global-things-impossible-in-css&#34;&gt;CS 101: Avoid global things‚Ä¶ impossible in CSS&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, a CSS rule is &lt;strong&gt;global&lt;/strong&gt;. Now computer science tells us: ‚Äúavoid global things if you can‚Äù‚Ä¶ which you can‚Äôt in CSS.&lt;/p&gt;

&lt;p&gt;To simulate scopes you either have two choices: pre-processors or methodologies.&lt;/p&gt;

&lt;p&gt;Pre-processors like Sass, LESS or Stylus mean you can simulate scopes. You nest selectors so that changes on one page don‚Äôt affect other pages. This essentially outputs what some would consider &lt;strong&gt;bad&lt;/strong&gt; CSS. And it comes with its own issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nest too deeply and you‚Äôre going to get performance/readability issues&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you need a build tool to compile from your pre-processed language down to CSS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that spells one thing: more complexity hence more trouble.&lt;/p&gt;

&lt;p&gt;Methodologies like BEM, and OOCSS allow you to avoid the scoping issues at the cost of learning and rigorously applying the methodology. Style guides help, but really it‚Äôs a case of making do with a pretty hard to use language.&lt;/p&gt;

&lt;h3 id=&#34;3-purely-semantic&#34;&gt;3. Purely semantic&lt;/h3&gt;

&lt;p&gt;CSS is completely semantic. Since we‚Äôre saying ‚Äúthis looks like this‚Äù in our code, the only way to test it is to make sure ‚Äúthis looks like this‚Äù‚Ä¶ which is quite hard.&lt;/p&gt;

&lt;p&gt;Automated testing CSS? Unless you have a lot of time and want to go with webdriver &amp;gt; browser &amp;gt; take snapshots &amp;gt; compare the images‚Ä¶ well, you can‚Äôt really. You just have to measure as best you can, usually with your eyeballs.&lt;/p&gt;

&lt;p&gt;Refactoring CSS?&lt;/p&gt;

&lt;p&gt;‚ÄúJust rewrite the whole thing‚Äù.&lt;/p&gt;

&lt;p&gt;Extending CSS?&lt;/p&gt;

&lt;p&gt;‚ÄúWing it and hope for the best‚Äù.&lt;/p&gt;

&lt;p&gt;If it looks right, the CSS is right. Which means the only way to be good at CSS is to be good at CSS.&lt;/p&gt;

&lt;h3 id=&#34;4-quirks&#34;&gt;4. Quirks&lt;/h3&gt;

&lt;p&gt;CSS has a ton of quirks. Different browsers implement things differently and have different default styles.&lt;/p&gt;

&lt;p&gt;This can be fixed with frameworks (or reset stylesheets), which are costly in terms of page load-time.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Writing good CSS is hard, it needs to look perfectly right across browsers and devices. Worst of all, any random person can tell you your CSS is off. I‚Äôm guessing the average client won‚Äôt be trying to hit the edge cases of your server-logic. Which all contributes to a high-pressure, medium-reward environment for front-end guys.&lt;/p&gt;

&lt;p&gt;That‚Äôs why it‚Äôs so hard to find front-end web developers who can do the basics right. Getting the basics right is time-consuming and doesn‚Äôt pay half as well so why even bother?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>