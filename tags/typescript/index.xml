<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/typescript/</link>
    <description>Recent content in Typescript on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 02 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing an npm module with TypeScript and microbundle</title>
      <link>https://codewithhugo.com/writing-an-npm-module-with-typescript-and-microbundle/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/writing-an-npm-module-with-typescript-and-microbundle/</guid>
      <description>&lt;p&gt;For those looking to write a package and publish it to npm, TypeScript + microbundle is a low-friction way to build a high-quality library.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-typescript&#34;&gt;Why TypeScript?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; is a JavaScript superset that adds static types to it.
Its other features also follow the ECMAScript specification (current and future) quite closely.
For library authors this means you provide the consumers of your library, even those who don‚Äôt use TypeScript with more
details around expected types and for some editors/IDEs that integrate with TypeScript (like Visual Studio Code)
nicer auto-complete. TypeScript also serves as inline documentation that shouts at you when you pass something you
shouldn‚Äôt, which will come handy when you rediscover your code a couple of months down the line.&lt;/p&gt;

&lt;h2 id=&#34;why-microbundle&#34;&gt;Why microbundle?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/developit/microbundle&#34;&gt;Microbundle&lt;/a&gt; is a ‚Äúzero-configuration bundler for tiny modules‚Äù. It‚Äôs a wrapper around &lt;a href=&#34;https://rollupjs.org/guide/en&#34;&gt;rollup&lt;/a&gt; with sane defaults (including minification/compression), nice outputted size stats, multiple target formats (ES modules, CommonJS, UMD). Most of all in the scope of this post, it has TypeScript support out of the box (&lt;em&gt;actually&lt;/em&gt; no configuration, not even a &lt;code&gt;tsconfig.json&lt;/code&gt;).
It‚Äôs ridiculously easy to set up and allows library authors to focus on building a great library rather than setting up the plumbing to be able to ship a JavaScript library from ES6/TypeScript or other compile-to-JS tool üôÇ.&lt;/p&gt;

&lt;h2 id=&#34;zero-config-bundling&#34;&gt;Zero-config bundling&lt;/h2&gt;

&lt;p&gt;To start, we‚Äôll have to create setup our package run &lt;code&gt;npm init&lt;/code&gt; and complete all the prompts.&lt;/p&gt;

&lt;p&gt;Next run: &lt;code&gt;npm i --save-dev microbundle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a src and dist folder: &lt;code&gt;mkdir src &amp;amp;&amp;amp; mkdir dist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And add the first TypeScript file: &lt;code&gt;touch src/index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs add a class to the index.ts so we‚Äôre not just compiling empty files:
&lt;code&gt;echo &amp;quot;export class MyMainClass {}&amp;quot; &amp;gt;&amp;gt; src/index.ts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Microbundle looks at the &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&amp;quot;main&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;source&amp;quot;&lt;/code&gt; fields (compiled entry point and source entry point),
in our case that‚Äôs &lt;code&gt;dist/index.js&lt;/code&gt; (which doesn‚Äôt exist yet) and &lt;code&gt;src/index.ts&lt;/code&gt;.
Let‚Äôs edit it to have the following in the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;main&amp;quot;: &amp;quot;dist/index.js&amp;quot;,
  &amp;quot;source&amp;quot;: &amp;quot;src/index.ts&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means microbundle knows how to compile our library now, run: &lt;code&gt;npx microbundle&lt;/code&gt; (on versions of npm &amp;lt;5.x, you can also run &lt;code&gt;./node_modules/.bin/microbundle&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This will compile your &lt;code&gt;src/index.ts&lt;/code&gt; to the &lt;code&gt;dist&lt;/code&gt; folder.
If you look at the contents of the &lt;code&gt;dist&lt;/code&gt; folder, you‚Äôll see how much work microbundle does for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls dist
index.d.ts       index.js.map     index.m.js.map   index.umd.js.map
index.js         index.m.js       index.umd.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let‚Äôs explain what all these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.js&lt;/code&gt; is the CommonJS module. This is module type used by Node and it looks like &lt;code&gt;const myModule = require(&lt;/code&gt;&lt;code&gt;&#39;&lt;/code&gt;&lt;code&gt;my-module&lt;/code&gt;&lt;code&gt;&#39;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.m.js&lt;/code&gt; is the ECMAScript Module, as defined in ES6, it looks like &lt;code&gt;import MyModule from&lt;/code&gt; &lt;code&gt;&#39;&lt;/code&gt;&lt;code&gt;my-module&lt;/code&gt;&lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.umd.js&lt;/code&gt; is the UMD module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.d.ts&lt;/code&gt; is TypeScript type declaration file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then there‚Äôs a matching &lt;code&gt;.map&lt;/code&gt; file that maps back to the TypeScript source for each of the files.&lt;/p&gt;

&lt;p&gt;Take a look inside &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat dist/index.js
var n=function(){return function(){}}();exports.MyMainClass=n;
//# sourceMappingURL=index.js.map
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code&gt;class MyMainClass {}&lt;/code&gt; statement was compiled to its ES5 equivalent and the export to a CommonJS export.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.d.ts&lt;/code&gt; is also interesting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat dist/index.d.ts
export declare class MyMainClass {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows a TypeScript project to assign the correct type information back to the package‚Ä¶ which &lt;em&gt;is&lt;/em&gt; a roundabout way of doing since a TypeScript project should be able to just import the &lt;code&gt;.ts&lt;/code&gt; file. The separate type declaration means that non-TypeScript projects can also understand the public API of the module (eg. code editors can do smart autocomplete on unseen npm packages).&lt;/p&gt;

&lt;p&gt;microbundle can also watch for changes: &lt;code&gt;npx microbundle watch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For ease of use we can put the watch and build tasks in the &lt;code&gt;package.json&lt;/code&gt; as npm scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;dev&amp;quot;: &amp;quot;microbundle watch&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;microbundle&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;publish-the-module&#34;&gt;Publish the module&lt;/h2&gt;

&lt;p&gt;By leveraging microbundle we can publish the module as a CommonJS module (standard npm module), but also as an ES Module and a UMD module, to do this follow the guide at &lt;a href=&#34;https://github.com/developit/microbundle#specifying-builds-in-packagejson&#34;&gt;https://github.com/developit/microbundle#specifying-builds-in-packagejson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;main&amp;quot;: &amp;quot;dist/index.js&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;umd:main&amp;quot;: &amp;quot;dist/index.umd.js&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;dist/index.m.js&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;source&amp;quot;: &amp;quot;src/index.ts&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this &lt;code&gt;package.json&lt;/code&gt; you can publish to npm with &lt;code&gt;npm publish&lt;/code&gt;.
And if you enjoyed using &lt;a href=&#34;https://github.com/developit/microbundle&#34;&gt;microbundle&lt;/a&gt;, definitely keep using it but also give it a &lt;a href=&#34;https://github.com/developit/microbundle&#34;&gt;star on GitHub&lt;/a&gt; and let Jason Miller aka &lt;a href=&#34;https://twitter.com/_developit&#34;&gt;@_developit&lt;/a&gt; know you‚Äôre a fan on Twitter.&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href=&#34;https://unsplash.com/photos/J8R34suxfRU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Aaron Burden&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/search/photos/tiny?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
