<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/web-development/</link>
    <description>Recent content in Web Development on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codewithhugo.com/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In simple terms: code on the backend, frontend and how they interact</title>
      <link>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</guid>
      <description>A look at the shifting boundaries of the web development stack
This was originally posted as an answer on Quora: How do frontend code and backend code interact with each other?
Let’s start with quick definitions:
Frontend All things the browser can read, display and/or run. This means HTML, CSS and JavaScript.
HTML (Hypertext Markup Language) tells the browser “what” content is, eg. “heading”, “paragraph”, “list”, “list item”.
CSS (Cascading Style Sheets) tells the browser how to display elements eg.</description>
    </item>
    
    <item>
      <title>Avoiding falsy values in JavaScript arrays</title>
      <link>https://codewithhugo.com/avoiding-falsy-values-in-javascript-arrays/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/avoiding-falsy-values-in-javascript-arrays/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: use &lt;code&gt;Array.filter(Boolean)&lt;/code&gt; to filter out falsy values and avoid errors.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Animations: CSS vs JavaScript</title>
      <link>https://codewithhugo.com/animations-css-vs-javascript/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/animations-css-vs-javascript/</guid>
      <description>When should you use JavaScript when you can use CSS? This post was sparked by a question I answered on Quora: Which is better to use, CSS or JS?
The web frontend is built with the triumvirate of HTML, CSS and JavaScript (see “Backend code, frontend code and how they interact” for more details): HTML says what things are, CSS how they look and JavaScript does all the things the other two can’t.</description>
    </item>
    
    <item>
      <title>Why CSS is hard</title>
      <link>https://codewithhugo.com/why-css-is-hard/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/why-css-is-hard/</guid>
      <description>Things we’re not used to tend to be harder
I’m a developer, and I CSS. I probably have written more CSS than I have written Java, Ruby, PHP, Python and JavaScript combined.
Being a front-end developer is a dying art. By front-end I don’t mean ES6, Babelifyied React SPAs. I mean meat and potatoes: “here’s a design, turn it into a website please”.
CSS doesn’t get the love it deserves in the developer crowd.</description>
    </item>
    
    <item>
      <title>Writing an npm module with TypeScript and microbundle</title>
      <link>https://codewithhugo.com/writing-an-npm-module-with-typescript-and-microbundle/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/writing-an-npm-module-with-typescript-and-microbundle/</guid>
      <description>For those looking to write a package and publish it to npm, TypeScript + microbundle is a low-friction way to build a high-quality library.
Why TypeScript? TypeScript is a JavaScript superset that adds static types to it. Its other features also follow the ECMAScript specification (current and future) quite closely. For library authors this means you provide the consumers of your library, even those who don’t use TypeScript with more details around expected types and for some editors/IDEs that integrate with TypeScript (like Visual Studio Code) nicer auto-complete.</description>
    </item>
    
    <item>
      <title>Ditch syntax highlighting for better technical writing</title>
      <link>https://codewithhugo.com/ditch-syntax-highlighting-for-better-technical-writing/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/ditch-syntax-highlighting-for-better-technical-writing/</guid>
      <description>&lt;p&gt;Ditching syntax highlighting leads to more concise snippets,
more thought to be put to find a minimal example
and better overall flow in your writing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How components won the “framework wars”</title>
      <link>https://codewithhugo.com/how-components-won-the-framework-wars/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/how-components-won-the-framework-wars/</guid>
      <description>React vs Angular vs Vue: Why it doesn’t matter.
2018 marks the end of JavaScript fatigue and the “framework wars” A typical frontend/JavaScript developer career usually involves some jQuery and associated plugins before moving on to React, Angular or Vue.
Having experienced React, Vue and Angular, it seems they solve similar problems in a similar way. Where they differ is the setup experience and best-practices. In more ways than one, the mental model of these frameworks/libraries have converged to the component model.</description>
    </item>
    
  </channel>
</rss>