<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Productivity on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/productivity/</link>
    <description>Recent content in Productivity on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 23 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/productivity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Split an existing git commit</title>
      <link>https://codewithhugo.com/split-an-existing-git-commit/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/split-an-existing-git-commit/</guid>
      <description>&lt;p&gt;One of &lt;code&gt;git&lt;/code&gt;&amp;rsquo;s main differences when compared to other version control systems is that it lets the user rewrite the history. The main way to do this is to use &lt;code&gt;git rebase&lt;/code&gt;, usually followed by a &lt;code&gt;git push&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;force&lt;/code&gt; to overwrite history the remote with the local history.&lt;/p&gt;

&lt;p&gt;Here’s a look at how to split existing commits using &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Say you have two files edited in a commit (A and B) and you would like to get the changes from one of those files (A) into your current branch but not those from the other (B).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;git cherry-pick &amp;lt;commit-hash&amp;gt;&lt;/code&gt; is not an option since it would pull in the changes for both A and B.&lt;/p&gt;

&lt;p&gt;The solution is to split the commit into 2 and only cherry-pick the new commit that contains changes for A.&lt;/p&gt;

&lt;p&gt;To do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;git rebase -i &amp;lt;commit-hash&amp;gt;~&lt;/code&gt; (note the &lt;code&gt;~&lt;/code&gt;) or &lt;code&gt;git rebase -i &amp;lt;hash-of-previous-commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;find the commit you want to split in the rebase edit screen, change the &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt; (&lt;code&gt;edit&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;save and exit (&lt;code&gt;ESC&lt;/code&gt; followed by &lt;code&gt;:wq&lt;/code&gt; to close VIM)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD~&lt;/code&gt; to reset the staged changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add [files-to-add]&lt;/code&gt; all the files we want to add to the first commit (here would be &lt;code&gt;git add A&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; normally, with a message etc&lt;/li&gt;
&lt;li&gt;Run as many other rounds of as you want commits:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add [other-files-to-add]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;continue&lt;/code&gt; to indicate that the splitting has been finished and to continue the rebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally we can &lt;code&gt;git cherry-pick &amp;lt;new-commit-hash&amp;gt;&lt;/code&gt; to get the changes into our branch&lt;/p&gt;

&lt;p&gt;For any questions about using git, feel free to comment below or tweet to me &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover photo by &lt;a href=&#34;https://unsplash.com/photos/qcCHZLdsS80?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Markus Spiske&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/search/photos/axe-split-wood?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using ES6 classes for Sequelize 4 models</title>
      <link>https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/</guid>
      <description>

&lt;p&gt;The ES2015 or ES6 specification introduced &lt;code&gt;class&lt;/code&gt; to JavaScript.
Libraries like React went from &lt;code&gt;React.createClass&lt;/code&gt; to &lt;code&gt;class MyComponent extends React.Component&lt;/code&gt;,
ie went from rolling their own constructor to leveraging a language built-in to convey the programmer’s intent.&lt;/p&gt;

&lt;p&gt;For a Node.js web application’s persistence layer,
a few databases come to mind like &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;
(possibly paired with &lt;a href=&#34;http://mongoosejs.com/&#34;&gt;mongoose&lt;/a&gt;),
or a key-value store like &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run a relational database with a Node application, &lt;a href=&#34;http://docs.sequelizejs.com/&#34;&gt;Sequelize&lt;/a&gt;,
“An easy-to-use multi SQL dialect ORM for Node.js” is a good option.
It allows the application to run backed by a MySQL or PostgreSQL instance and
provides an easy way to map from entities&amp;rsquo; representation in the database to JavaScript and vice versa.&lt;/p&gt;

&lt;p&gt;Sequelize’s API for model definitions looks like the following (from the docs &lt;a href=&#34;http://docs.sequelizejs.com/manual/tutorial/upgrade-to-v4.html):&#34;&gt;http://docs.sequelizejs.com/manual/tutorial/upgrade-to-v4.html):&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MyModel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// fields and methods
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add class and instance methods you would write the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Class Method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;associate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Instance Method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someMethod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is necessary pre-ES6 since there was no concept of classical inheritance. Since we have class now, why not leverage them? For developers who are used to having classes, the following would likely look familiar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;associate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;someMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sequelize actually supports this, but the documentation is a bit lacking. One of the only place to find a reference to how to do this is in a GitHub issue: &lt;a href=&#34;https://github.com/sequelize/sequelize/issues/6524&#34;&gt;https://github.com/sequelize/sequelize/issues/6524&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a cheat sheet for things you would want to do and how to achieve it using ES6 classe + inheriting from &lt;code&gt;Sequelize.Model&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#typed-fields&#34;&gt;Defining fields on a model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assocations&#34;&gt;Creating associations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#custom-table-name&#34;&gt;Custom table name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#custom-model-name&#34;&gt;Custom model name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#queries&#34;&gt;Wrap queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#instance-methods&#34;&gt;Instance methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#initialise-all&#34;&gt;Initialising all models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This was sent out on the &lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Code with Hugo newsletter&lt;/a&gt; last Monday.
&lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Subscribe&lt;/a&gt; to get the latest posts right in your inbox (before anyone else).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;typed-fields&#34;&gt;Initialise the model with typed field(s)&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;myField&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;STRING&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;associations&#34;&gt;Associate your model to other models&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;associate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myAssociation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;belongsTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OtherModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// or
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myAssociation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;belongsTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OtherModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;customer-table-name&#34;&gt;Setting a custom table name for your model&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// field definitions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;tableName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myModels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;custom-model-name&#34;&gt;Setting a custom model name for your model (for Sequelize)&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// field definitions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;modelName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myModel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;queries&#34;&gt;Wrap queries&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;findOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;attributes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;createdAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DESC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;instance-methods&#34;&gt;Instance methods&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyModel&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getFullName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastName&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;initialise-all&#34;&gt;Initialise all your models&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;require()&lt;/code&gt; followed by &lt;code&gt;model.init()&lt;/code&gt; is an alternative to &lt;code&gt;sequelize.import(path)&lt;/code&gt;, it’s a bit clearer what is and isn’t imported and under what name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sequelize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// pass your sequelize config here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FirstModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./first-model&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SecondModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./second-model&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ThirdModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./third-model&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FirstModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SecondModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Third&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ThirdModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sequelize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Run `.associate` if it exists,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ie create relationships in the ORM
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;associate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;associate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sequelize&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For any questions about using Sequelize in this manner or developing Node apps
backed by relational databases, feel free to comment below or tweet to me &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was sent out on the &lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Code with Hugo newsletter&lt;/a&gt; last Monday.
&lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Subscribe&lt;/a&gt; to get the latest posts right in your inbox (before anyone else).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cover photo by &lt;a href=&#34;https://unsplash.com/photos/sorCkbu4Nzw?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Eugene Lim&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/search/photos/square?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ditch syntax highlighting for better technical writing</title>
      <link>https://codewithhugo.com/ditch-syntax-highlighting-for-better-technical-writing/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/ditch-syntax-highlighting-for-better-technical-writing/</guid>
      <description>&lt;p&gt;Ditching syntax highlighting leads to more concise snippets,
more thought to be put to find a minimal example
and better overall flow in your writing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Writing technical content is hard, picking a nice syntax highlighting theme is harder.&lt;/p&gt;

&lt;p&gt;There are so many options and each platform has a ton more you can for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;export your code as images with services like &lt;a href=&#34;https://carbon.now.sh&#34;&gt;carbon.now.sh&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;take screenshots of your code in your editor&lt;/li&gt;
&lt;li&gt;use GitHub gists &lt;a href=&#34;https://gist.github.com&#34;&gt;gist.github.com&lt;/a&gt; or other hosted solution&lt;/li&gt;
&lt;li&gt;compile your examples to code blocks (eg. as part of your markdown compilation) and
leverage CSS or JavaScript libraries to highlight them on the web&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other option is to just &lt;em&gt;not&lt;/em&gt; have highlighted code blocks.&lt;/p&gt;

&lt;p&gt;Here are a couple of reasons to ditch syntax highlighting.&lt;/p&gt;

&lt;h1 id=&#34;1-focus&#34;&gt;1. Focus&lt;/h1&gt;

&lt;p&gt;Focus on the content not presentation.&lt;/p&gt;

&lt;p&gt;Spend time polishing and rethinking your examples, not going back and exporting
that code snippet on &lt;a href=&#34;https://carbon.now.sh&#34;&gt;carbon.now.sh&lt;/a&gt; for the 10th time.&lt;/p&gt;

&lt;p&gt;The code snippets are an intrisic part of your content, not just a nice flourish.
Your examples illustrate your points.
You don&amp;rsquo;t edit your content in 5 different formats, your code should be no different.&lt;/p&gt;

&lt;p&gt;Make your content pretty but not at the expense of your ability to publish it fast.&lt;/p&gt;

&lt;h1 id=&#34;2-difficult-to-further-highlight-inside-something-that-s-highlighted&#34;&gt;2. Difficult to further highlight inside something that&amp;rsquo;s highlighted&lt;/h1&gt;

&lt;p&gt;Just like you can use &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt; text in moderation,
&lt;strong&gt;if a whole sentence or paragraph is bold, it&amp;rsquo;s hard to &lt;em&gt;highlight&lt;/em&gt; anything inside it.&lt;/strong&gt;
From there on it&amp;rsquo;s just a race to the biggest, flashiest text.
That&amp;rsquo;s not something you want to turn your post into.&lt;/p&gt;

&lt;p&gt;What that means is that having large chunks of highlighted code might make it hard for you
to show your readers what you&amp;rsquo;re trying to show them.&lt;/p&gt;

&lt;h1 id=&#34;3-content-that-lasts&#34;&gt;3. Content that lasts&lt;/h1&gt;

&lt;p&gt;Using images or 3rd party services to host your code means your post now needs multiple
services to be up for it to keep existing in full.&lt;/p&gt;

&lt;p&gt;Services shut down (sometimes quite quickly), images get lost.
Don&amp;rsquo;t let your post live on borrowed time, let it host all its own content.&lt;/p&gt;

&lt;h1 id=&#34;4-accessible-and-fast&#34;&gt;4. Accessible and fast&lt;/h1&gt;

&lt;p&gt;Put yourself in the reader&amp;rsquo;s shoes.&lt;/p&gt;

&lt;p&gt;How many times did you load a post on a flaky network,
just before the connection dropped, the post flashes, it looks like it loaded,
maybe you beat the flaky network this time?&lt;/p&gt;

&lt;p&gt;Wrong! The post loaded alright, but to have any of the code, you need the images and the embeds&amp;hellip; great.&lt;/p&gt;

&lt;p&gt;A code block is just text, it can be interpreted better than an image.
Even if that image has a nice alt text and good metadata.&lt;/p&gt;

&lt;h1 id=&#34;5-find-a-minimal-case&#34;&gt;5. Find a minimal case&lt;/h1&gt;

&lt;p&gt;Not having nice-looking code means you&amp;rsquo;ll shorten your examples and that&amp;rsquo;s a good thing.&lt;/p&gt;

&lt;p&gt;More explanation, less shoving code in people&amp;rsquo;s faces.
After all that&amp;rsquo;s why they&amp;rsquo;re here.
If they wanted to read code, they would have gone some open source project&amp;rsquo;s GitHub page.&lt;/p&gt;

&lt;h1 id=&#34;6-write-as-you-speak&#34;&gt;6. Write as you speak&lt;/h1&gt;

&lt;p&gt;Large code snippets, just like massive paragraphs, can start to look like a wall of text.&lt;/p&gt;

&lt;p&gt;When you start to mix between small snippets and code inset in your text, the content will flow better.
It will be more like a conversation, you explaining to a co-worker or a little sister,
what exactly it is that &lt;code&gt;var&lt;/code&gt; is compared to &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A well-written post with inset code is just like a well-punctuated and structured post.
It feels a lot nicer to read, happy readers, happy writers.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Reduce the amount of time you spend messing around with your code blocks and spend more time thinking about it.&lt;/p&gt;

&lt;p&gt;What other hurdles do you have in your technical writing?&lt;/p&gt;

&lt;p&gt;Let me know here or on Twitter: &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learn git even if you don’t code</title>
      <link>https://codewithhugo.com/learn-git-even-if-you-dont-code/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/learn-git-even-if-you-dont-code/</guid>
      <description>

&lt;h3 id=&#34;the-tools-we-wield-define-us-git-is-the-one-tool-all-developers-use&#34;&gt;The tools we wield define us, git is the one tool all developers use&lt;/h3&gt;

&lt;p&gt;Git is a ubiquitous version control tool. The way it works tightly correlates with software engineering and the mindsets of developers. It was purpose-built and designed to be used for the development of the Linux Kernel, one of the largest software projects that’s depended on by millions of developers.&lt;/p&gt;

&lt;h2 id=&#34;your-editing-workflow-is-painful-because-it-s-not-version-controlled&#34;&gt;Your editing workflow is painful because it’s not version-controlled&lt;/h2&gt;

&lt;p&gt;As part of a team, your editing workflow probably consists of sending a file back and forth for review, comment and amendments. In a programmer’s eyes, this is a crazy inefficient way to work. In addition, the likelihood an edit will be lost or overwritten is high.&lt;/p&gt;

&lt;p&gt;With git, that doesn’t happen any more. If only everyone used git, no more lost comments or amendments.&lt;/p&gt;

&lt;p&gt;That’s wishful thinking of course but understanding how git works with branches, commits and so on will help you use the tools you already use more efficiently.&lt;/p&gt;

&lt;p&gt;Reflexes like using the “latest” version of the document and re-applying your changes to it methodically will radically change the way you approach collaborative editing.&lt;/p&gt;

&lt;h2 id=&#34;designed-for-a-distributed-team&#34;&gt;Designed for a distributed team&lt;/h2&gt;

&lt;p&gt;In a remote, remote-friendly or a company that outsources any work, you know how long and arduous the revision process can be. Git was designed to help this process, many tools in the ecosystem around git have a concept of grouped changes that should be reviewed together (what GitHub calls Pull Requests).&lt;/p&gt;

&lt;p&gt;Git becomes your one source of truth, everyone has it locally but it’s also all online.&lt;/p&gt;

&lt;h2 id=&#34;proven-solutions-to-scale-problems&#34;&gt;Proven solutions to scale problems&lt;/h2&gt;

&lt;p&gt;As one person the versioning process is “easy”. Adding another contributor can change the way you work massively. Now imaging going from 1 to over 1,500. That’s what the Linux Kernel did, from just Linus to thousands of contributors from companies such as Intel, IBM and Samsung.&lt;/p&gt;

&lt;p&gt;Processes around git allow it to scale with your team and your project. Workflows like taking a section of work and integrating it after review are great even if you’re not using git. Having a version-control mindset and approach to this problem will help even with the less than optimal tools.&lt;/p&gt;

&lt;h2 id=&#34;a-complex-tool-with-simple-actions-the-unix-philosophy&#34;&gt;A complex tool with simple actions: the UNIX philosophy&lt;/h2&gt;

&lt;p&gt;Git is actually relatively complex as a tool. Most of it was designed under the UNIX philosophy that tools should do one thing well and then be composed (or strung) together to do more complex actions.&lt;/p&gt;

&lt;p&gt;This stands quite true of git despite not being true of all the actions you may run. Some things aren’t quite intuitive but they’re there if you remember them.&lt;/p&gt;

&lt;p&gt;Git wraps concepts that most non-developers can grasp in developer-friendly packaging.&lt;/p&gt;

&lt;p&gt;Due to the accessibility of version control as a business problem, learning to use git is an introduction to the command line that is more understandable. Non-developers could probably see themselves using git (even if they never end up doing so)&lt;/p&gt;

&lt;h2 id=&#34;working-in-the-open&#34;&gt;Working in the Open&lt;/h2&gt;

&lt;p&gt;Open Source projects usually use git and hosting platforms like GitHub, GitLab or BitBucket. The first obvious project to use it is the Linux Kernel, which is one of the biggest Open Source Software projects out there.&lt;/p&gt;

&lt;p&gt;Understanding git means you understand how developers from around the world in different timezones and with different backgrounds can collaborate.&lt;/p&gt;

&lt;p&gt;Hopefully you now understand how git can be considered more than just a version control tool.&lt;/p&gt;

&lt;p&gt;If you want to learn more about git, I’ve written a course specifically for this purpose, you can find it at the following link for free if you sign up: &lt;a href=&#34;http://skl.sh/2zNN3En&#34;&gt;Git for Creatives&lt;/a&gt; (&lt;a href=&#34;http://skl.sh/2zNN3En&#34;&gt;http://skl.sh/2zNN3En&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Feel free to get in touch with me on Twitter &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leave some 👏🏻 if you enjoyed this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In simple terms: code on the backend, frontend and how they interact</title>
      <link>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</guid>
      <description>

&lt;p&gt;A look at the shifting boundaries of the web development stack&lt;/p&gt;

&lt;p&gt;This was originally posted as an answer on Quora:
&lt;a href=&#34;https://www.quora.com/How-does-a-frontend-code-and-a-backend-code-interact-with-each-other/&#34;&gt;&lt;strong&gt;How do frontend code and backend code interact with each other?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with quick definitions:&lt;/p&gt;

&lt;h3 id=&#34;frontend&#34;&gt;Frontend&lt;/h3&gt;

&lt;p&gt;All things the browser can read, display and/or run. This means HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTML&lt;/code&gt; (Hypertext Markup Language) tells the browser “what” content is, eg. “heading”, “paragraph”, “list”, “list item”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt; (Cascading Style Sheets) tells the browser how to display elements eg. “the first paragraph has a 20px margin after it”, “all text in the ‘body’ element should be dark grey in colour and use Verdana as its font”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; tells the browser how to react to some interactions using a lightweight programming language. A lot of websites don’t actually use much JavaScript but if you click on something and content changes without the page flickering to white before showing the new content, that means JavaScript is used somewhere.&lt;/p&gt;

&lt;h3 id=&#34;backend&#34;&gt;Backend&lt;/h3&gt;

&lt;p&gt;All things that run on a server ie. “not in the browser” or “on a computer connected to a network (usually the internet) that replies to other computers’ messages” are backend.&lt;/p&gt;

&lt;p&gt;For your backend you can use any tool available on your server (which is just a computer that is set up to reply to messages). This means you can use any general purpose programming language, eg. Ruby, PHP, Python, Java, JavaScript/Node, bash. It also means you can use a host of Database Management Systems eg. MySQL, PostgreSQL, MongoDB, Cassandra, Redis, Memcached.&lt;/p&gt;

&lt;h2 id=&#34;the-state-of-backend-frontend-interaction&#34;&gt;The state of backend-frontend interaction&lt;/h2&gt;

&lt;p&gt;There are two main architectures today that define how your backend and frontend interact.&lt;/p&gt;

&lt;h3 id=&#34;server-rendered-apps&#34;&gt;&lt;strong&gt;Server-rendered apps&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The first is straight up HTTP requests to a **server-rendered **app. This is a system whereby the browser sends a HTTP request and the server replies with a HTML page.&lt;/p&gt;

&lt;p&gt;Between receiving the request and responding, the server usually queries the database and feeds it into a template (ERB, Blade, EJS, Handlebars).&lt;/p&gt;

&lt;p&gt;Once the page is loaded in the browser, HTML defines what things are, CSS how they look and JS any special interactions.&lt;/p&gt;

&lt;h3 id=&#34;communication-using-ajax&#34;&gt;&lt;strong&gt;Communication using AJAX&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;AJAX stands for &lt;strong&gt;A&lt;/strong&gt;synchronous &lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript and &lt;strong&gt;X&lt;/strong&gt;ML. This means that the JavaScript loaded in the browser sends a HTTP request (XHR, XML HTTP Request) from **within the page **and historically got a XML response.&lt;/p&gt;

&lt;p&gt;Nowadays, responses are also done in JSON format.&lt;/p&gt;

&lt;p&gt;This means that your server needs to have an &lt;strong&gt;endpoint&lt;/strong&gt;* *which replies JSON/XML to requests. Two examples of protocols for this are REST and SOAP.&lt;/p&gt;

&lt;h3 id=&#34;client-side-single-page-applications&#34;&gt;&lt;strong&gt;Client-side (single page) applications&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;AJAX allows you to load data without refreshing the page. This has been pushed to the max with frameworks such as Angular and Ember. These apps are bundled, sent to the browser and any subsequent** rendering **is done on the client-side (browser).&lt;/p&gt;

&lt;p&gt;These frontends communicate with the backend over HTTP using JSON/XML responses.&lt;/p&gt;

&lt;h3 id=&#34;universal-isomorphic-applications&#34;&gt;Universal/Isomorphic applications&lt;/h3&gt;

&lt;p&gt;React and Ember (amongst other) libraries and frameworks allow you to render an app on the server (backend) as well as on the client (frontend).&lt;/p&gt;

&lt;p&gt;When set up like this, the app uses both AJAX and server-rendered HTML to communicate frontend to backend.&lt;/p&gt;

&lt;h2 id=&#34;beyond-frontend-and-backend&#34;&gt;Beyond frontend and backend&lt;/h2&gt;

&lt;h3 id=&#34;standalone-frontends&#34;&gt;Standalone frontends&lt;/h3&gt;

&lt;p&gt;The web applications you’re going to build are going to need a network connection less and less.&lt;/p&gt;

&lt;p&gt;Progressive web applications are loaded once and run forever (ish). You can have a database in the browser. For some use cases, your applications literally only needs a backend on first load and then just for syncing/safeguarding of data. This persistence layer means that most of the logic is into the client-side application (frontend).&lt;/p&gt;

&lt;h3 id=&#34;lightweight-backends&#34;&gt;Lightweight backends&lt;/h3&gt;

&lt;p&gt;Backends are becoming more and more lightweight. Technologies like document stores and graph databases mean that there’s a lot less going on in terms of re-aggregation of data by the backend service. The onus is on the client to specify what data it needs (graph databases) or to fetch all the different fragments of data it needs (REST APIs).&lt;/p&gt;

&lt;p&gt;I mean we’re now building backend services that don’t even run all the time, just when they’re required, thanks to serverless architectures like AWS Lambda.&lt;/p&gt;

&lt;h3 id=&#34;blurred-lines&#34;&gt;Blurred lines&lt;/h3&gt;

&lt;p&gt;The complexity is shifting across the frontend/backend boundary. We now have the choice, depending on what sort of application we’re building, to make our client hold the complexity or to keep it on the server.&lt;/p&gt;

&lt;p&gt;Each option has its pros and cons. Namely the server is an environment that is more stable and has less unknowns but it’s always a network call away. Certain users have the latest browsers and can profit from a client-side application that does most of the work with a snappy UI but you may be alienating users who don’t run the latest browser on an optic fibre internet connection.&lt;/p&gt;

&lt;p&gt;At the end of the day, having all these options is a good thing. As long as we focus on building great experiences and products using the right tool for the job. Hopefully you have gained a bit more understanding of the state of web development today.&lt;/p&gt;

&lt;p&gt;Recent posts:
&lt;a href=&#34;https://medium.com/@hugo__df/7-reasons-you-should-be-hosted-on-aws-9312e40ee323&#34;&gt;&lt;strong&gt;7 reasons you should be hosted on AWS&lt;/strong&gt;
*Amazon Web Services is one of the leading hosting providers, here’s why.*medium.com&lt;/a&gt;
&lt;a href=&#34;https://hackernoon.com/virtualstudio-code-the-editor-i-didnt-think-i-needed-16970c8356d5&#34;&gt;&lt;strong&gt;Visual Studio Code: the editor I didn’t think I needed&lt;/strong&gt;
*It’s the small things that make a difference.*hackernoon.com&lt;/a&gt;
&lt;a href=&#34;https://medium.com/@hugo__df/why-css-is-hard-89f3b221dd4d&#34;&gt;&lt;strong&gt;Why CSS is hard&lt;/strong&gt;
*Things we’re not used to tend to be harder*medium.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AVA, low-config testing for JavaScript</title>
      <link>https://codewithhugo.com/ava-low-config-testing-for-javascript/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/ava-low-config-testing-for-javascript/</guid>
      <description>

&lt;p&gt;A JavaScript testing library for 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/avajs/ava&#34;&gt;AVA&lt;/a&gt; is a Futuristic JavaScript test runner.&lt;/p&gt;

&lt;p&gt;Some of its best features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it works out of the box, no need to specify a blob for test files or add Babel hooks&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it’s runs tests in parallel, this stops you from using global state and runs faster&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the tests are async by default&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I quite like AVA since I can just drop it in and reap benefits without too much hassle. I’ve never had to fight against AVA to get tests running, that means more focus on the code and tests and less on the setup.&lt;/p&gt;

&lt;h2 id=&#34;no-blob-configuration&#34;&gt;No blob configuration&lt;/h2&gt;

&lt;p&gt;Running AVA at the command line is as simple as (if you’ve got it installed globally):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ava&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run AVA in watch mode at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ava -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run AVA in verbose mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ava --verbose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your test files match against &lt;code&gt;test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js&lt;/code&gt; AVA will pick them up and run them. You can always override this, but I don’t think you would want to configure AVA differently.&lt;/p&gt;

&lt;p&gt;We can wrap these commands in a npm scripts and use the project’s version of AVA. And actually AVA has a command that can add this stuff to your package.json:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ava --init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will add AVA in &lt;code&gt;devDependencies&lt;/code&gt; and in &lt;code&gt;test&lt;/code&gt; script.&lt;/p&gt;

&lt;h2 id=&#34;visibility-where-it-matters&#34;&gt;Visibility where it matters&lt;/h2&gt;

&lt;p&gt;Here is an example test file in Mocha:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;chai&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Some function&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;does something with input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;actualOutput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expectedOutput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;actualOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expectedOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;describe&lt;/code&gt;? &lt;code&gt;it&lt;/code&gt;? Not so obvious that they’re functions defined by the test runner. We’re also using chai for our assertions… Wouldn’t it be nice if all this was one package and it was obvious we were using it?&lt;/p&gt;

&lt;p&gt;Mocha best practices also say we shouldn’t be using arrow functions (&lt;code&gt;() =&amp;gt; {}&lt;/code&gt;) since we may want to access the this defined inside of describe or it instead of the global module this.&lt;/p&gt;

&lt;p&gt;Here is the same test in AVA:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import test from &#39;ava&#39;;

test(&#39;Some function&#39;, t =&amp;gt; {
  const actualOutput = 42;
  const expectedOutput = 42;
  t.equal(actualOutput, expectedOutput);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AVA is less verbose, it does the job of the assertion library &lt;em&gt;and&lt;/em&gt; is the test runner at the same time. We’re relying on a this anywhere since the test object (&lt;code&gt;t&lt;/code&gt;) is passed as a parameter.&lt;/p&gt;

&lt;p&gt;There is no nesting in AVA, it uses the test file and its path to define test suites.&lt;/p&gt;

&lt;h2 id=&#34;hooks-for-current-and-future-javascript&#34;&gt;Hooks for current and future JavaScript&lt;/h2&gt;

&lt;p&gt;AVA runs using full ES2016 syntax by default and runs its code through Babel transforms.&lt;/p&gt;

&lt;p&gt;This means, without adding a Babel hook (like you would in Mocha) you can write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ava&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sinon&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sinon&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;It actually runs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you run the tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ava

  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; passed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No syntax error on the ‘import’ statement.&lt;/p&gt;

&lt;p&gt;If you’re importing components that need to be Babel transformed (React components using JSX for example), you just need to add the following Babel hook to the AVA config in package.json:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;ava&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;require&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;babel-register&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;babel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inherit&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means it’s easy to write modern JavaScript and test it using the same syntax and minimal headaches using AVA.&lt;/p&gt;

&lt;h2 id=&#34;async-by-default&#34;&gt;Async by default&lt;/h2&gt;

&lt;p&gt;No more Promisifying your assertions, no more passing done callbacks, well sort of.&lt;/p&gt;

&lt;p&gt;If you use promises, AVA loves it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import test from &#39;ava&#39;;

test(&#39;Promise resolves to correct value&#39;, t =&amp;gt; 
  return new Promise(resolve =&amp;gt; resolve(1))
    .then(value =&amp;gt; {
      t.is(value, 1)
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use async, even better:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import test from &#39;ava&#39;;

test(&#39;Promise resolves to correct value&#39;, async t =&amp;gt; {
  const promiseResolution = new Promise(resolve =&amp;gt; resolve(1));
  t.is(await promiseResolution, 1);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you have the good old callback mode, which works fine, you obviously have to call and .end somewhere like any other test runner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import test from &#39;ava&#39;;

test.cb(&#39;Callback gets correct value&#39;, t =&amp;gt; {
  t.plan(1);
  setTimeout(() =&amp;gt; {
    t.pass();
    t.end();
  }, 100);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the async cases, you can use t.plan to specify the number of assertions that should be run, it will fail if that &lt;em&gt;exact&lt;/em&gt; number of assertions isn’t run . This is different to some other test runner that will fail if less than the specified number of assertions are run.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;AVA is low-config, low maintenance testing for JavaScript for 2017 and beyond. You get really nice diffs on failed assertions, a one-library solution for assertions and running tests. The tests run fast and promote best practice (pure tests) and are ready to test async functionality out of the box.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First-class and Higher Order Functions: Effective Functional JavaScript</title>
      <link>https://codewithhugo.com/first-class-and-higher-order-functions-effective-functional-javascript/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/first-class-and-higher-order-functions-effective-functional-javascript/</guid>
      <description>

&lt;p&gt;Functions: the killer JavaScript feature we never talk about.&lt;/p&gt;

&lt;p&gt;JavaScript is a very in-demand language today. It runs in a lot of places from the browser to embedded systems and it brings a non-blocking I/O model that is faster than others for some types of applications. What really sets JavaScript apart from the rest of scripting languages is its highly functional nature.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript has more in common with functional languages like &lt;a href=&#34;http://javascript.crockford.com/little.html&#34;&gt;Lisp or Scheme&lt;/a&gt; than with C or Java. — Douglas Crockford in &lt;a href=&#34;http://javascript.crockford.com/javascript.html&#34;&gt;JavaScript: the World’s Most Misunderstood Language&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a widely publicised fact that Brendan Eich, when creating the first version of JavaScript, was actually told he would be able to build a &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_(programming_language)&#34;&gt;Lisp, a list processing language like Scheme or common Lisp&lt;/a&gt;. It turns out that Sun Microsystems had other ideas and this programming language needed to wear a coat of procedural syntax inherited from a C or Java-like language. Despite all the semicolons, at its heart JavaScript remains a functional language with features such as first-class functions and closures.&lt;/p&gt;

&lt;p&gt;This post will focus on first-class functions and higher order functions. To read more about closures and how to leverage them to wield JavaScript’s functional powers, I’ve written the&lt;a href=&#34;https://hackernoon.com/ingredients-of-effective-functional-javascript-closures-partial-application-and-currying-66afe055102a&#34;&gt; following post&lt;/a&gt;:
&lt;a href=&#34;https://hackernoon.com/ingredients-of-effective-functional-javascript-closures-partial-application-and-currying-66afe055102a&#34;&gt;&lt;strong&gt;Ingredients of Effective Functional JavaScript: Closures, Partial Application and Currying&lt;/strong&gt;
*To use JavaScript to its full potential you have to embrace its strong functional programming base.*hackernoon.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;first-class-functions&#34;&gt;First-class functions&lt;/h2&gt;

&lt;p&gt;A language with first-class functions means that it treats functions like expressions of any other type. Functions are like any other object.&lt;/p&gt;

&lt;p&gt;You can pass them into other functions as parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function runFunction(fn, data) {
  return fn(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can assign a function as a value to a variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myFunc = function() {
  // do something
};

const myNewGenFunc = someParam =&amp;gt; someParam;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can return a function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function takeFirst(f, g) {
   return f;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;first-class-functions-in-practice&#34;&gt;First-class functions in practice&lt;/h2&gt;

&lt;h3 id=&#34;cheap-dependency-injection&#34;&gt;Cheap dependency injection&lt;/h3&gt;

&lt;p&gt;In languages without first-class functions to pass a dependency in means passing an object. Here we can just pass functions around, which is great.&lt;/p&gt;

&lt;p&gt;For example in Java to run a custom sort on an ArrayList, we have to use ArrayList#sort which expects a Comparator object as a parameter (see &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#sort-java.util.Comparator-&#34;&gt;the Java API docs here&lt;/a&gt;). In JavaScript we use Array#sort (&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&#34;&gt;MDN reference here&lt;/a&gt;) which expects a function. This is a bit less verbose since in this case we’re just going to be implementing one method of the Comparator interface&lt;/p&gt;

&lt;p&gt;It gets even better with ES6 default parameter syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// in fetch.js
import axios from &#39;axios&#39;;

export function fetchSomething(fetch = axios) {
  return fetch(&#39;/get/some/resource&#39;);
}

// in someModule.js
import axios from &#39;axios&#39;;

import { fetchSomething } from &#39;./fetch&#39;;

const fetcherWithHeaders = axios({
  // pass some custom configs
});

fetchSomething(fetcherWithHeaders)
.then(/* do something */)
.catch(/* handle error */);

// in someOtherModule.js

import { fetchSomething } from &#39;./fetch&#39;;

fetchSomething()
.then(/* do something */)
.catch(/* handle error */);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;callbacks-and-non-blocking-io&#34;&gt;Callbacks and non-blocking IO&lt;/h3&gt;

&lt;p&gt;JavaScript’s default behaviour on IO is non-blocking. This means we tend to pass a lot of callbacks (until Promises came along at least). Being able to pass a function as a callback instead of an object on which we will run a method (like we would in say Java) means we can have terseness in callback-based code.&lt;/p&gt;

&lt;p&gt;For example in Node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require(&#39;fs&#39;);

fs.readFile(&#39;./myFile.txt&#39;, &#39;utf-8&#39;, function(err, data) {
  // this is a callback, it gets executed
  // once the file has been read
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-functional-programming-primitives-that-require-first-class-functions&#34;&gt;More functional programming primitives that require first-class functions&lt;/h3&gt;

&lt;p&gt;Being able to return a function and closures means we have access to things like partial application and currying. &lt;a href=&#34;https://hackernoon.com/ingredients-of-effective-functional-javascript-closures-partial-application-and-currying-66afe055102a&#34;&gt;Read more about those FP superpowers here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It also means we can start creating higher order functions.&lt;/p&gt;

&lt;h2 id=&#34;higher-order-functions&#34;&gt;Higher order functions&lt;/h2&gt;

&lt;p&gt;A function is a higher order function if it takes a function as a parameter, or returns a function as its result. Both of these requirements rely on functions being first-class objects in a language.&lt;/p&gt;

&lt;p&gt;map, filter and reduce/reduceRightare the functions present in JavaScript that map to classic higher order functions in other functional languages.&lt;/p&gt;

&lt;p&gt;In other languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;map tends to be called map or transform&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;filter is called select in some languages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;reduce and reduceRight are the fold left and right functions (also called accumulate, aggregate, compress or inject in different languages)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In functional programming languages, there are no loops. When you need to do an operation like traversing a list or a tree, there are two predominant styles: recursion and higher order functions.&lt;/p&gt;

&lt;p&gt;Recursion relies on a function calling itself, usually on a different part of the parameter (list being traversed for example). That’s a topic for &lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa#.i4kfpmmfr&#34;&gt;another post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Higher order functions are usually provided by the language. In ES6 JavaScript these functions are defined on the Array prototype.&lt;/p&gt;

&lt;h3 id=&#34;array-map&#34;&gt;Array#map&lt;/h3&gt;

&lt;p&gt;map is used if we want to perform the same change on each member of the array. It takes the function that should be applied to each element of the array as a parameter. That function is passed (element, index, wholeArray) as parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const myArr = [ &#39;some text&#39;, &#39;more text&#39;, &#39;final text&#39; ];

const mappedArr = myArr.map( function(str) {
  return str.split(&#39; &#39;);
});

console.log(mappedArr);
// [ [ &#39;some&#39;, &#39;text&#39; ], [ &#39;more&#39;, &#39;text&#39; ], [ &#39;final&#39;, &#39;text&#39; ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-filter&#34;&gt;Array#filter&lt;/h3&gt;

&lt;p&gt;filter allows us to pick which elements of the array should remain in the transformed list by passing a filtering function that returns a Boolean value (true/false). As for map this functions is passed (element, index, wholeArray).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const myArr = [ 5, 10, 4, 50, 3 ];

const multiplesOfFive = myArr.filter( function(num) {
  return num % 5 === 0;
});

console.log(multiplesOfFive);
// [ 5, 10, 50 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-reduce&#34;&gt;Array#reduce&lt;/h3&gt;

&lt;p&gt;reduce is used to change the shape of the array. We provide more than 1 parameter to this function (in addition to the array we’re reducing). We pass a reducing function and optionally the initial value of to reduce with. The function is passed (prev, curr, index, wholeArray) . prev is the value returned by the previous reduction, for the first iteration that means it’s either the initial value of the first element of the array. curr is the value in the array at which we’re at.&lt;/p&gt;

&lt;p&gt;The classic example is summing or concatenating.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const myNumbers = [ 1, 2, 5 ];
const myWords = [ &#39;These&#39;, &#39;all&#39;, &#39;form&#39;, &#39;a&#39;, &#39;sentence&#39; ];

const sum = myNumbers.reduce( function(prev, curr) {
  return prev + curr;
}, 0);

console.log(sum); // 8

const sentence = myWords.reduce( (prev, curr) =&amp;gt; {
 return prev + &#39; &#39; + curr;
}); // the initial value is optional

console.log(sentence);
// &#39;These all form a sentence&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about the internal of map, filter and reduce or recursion, I’ve reimplemented them in a recursive style using ES6 destructuring in the following post:
&lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa&#34;&gt;&lt;strong&gt;Recursion in JavaScript with ES6, destructuring and rest/spread&lt;/strong&gt;
*The latest ECMA standard for JavaScript (ECMAScript 6) makes JavaScript more readable by encouraging a more declarative…*hackernoon.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;higher-order-functions-in-practice&#34;&gt;Higher order functions in practice&lt;/h2&gt;

&lt;h3 id=&#34;no-more-loops&#34;&gt;No more loops&lt;/h3&gt;

&lt;p&gt;Higher order functions allow us to get rid of the imperative loops that seem to be spread everywhere.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var newArr = [];
var myArr = [ 1, 2, 3 ];

for(var i = 0; i &amp;lt; myArr.length; i++) {
  newArr.push(myArr[i] * 2);
}

console.log(newArr); // [ 2, 4, 6 ]

// nicer with `map`
const doubled = myArr.map( x =&amp;gt; x * 2 );
console.log(doubled); // [ 2, 4, 6 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The intent is just clearer with map. We can also extract the double function so we’re making our code more readable and modular.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const double = x =&amp;gt; x * 2;
const doubled = arr.map(double);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It reads like a book and that’s important because we write for humans not machines.&lt;/p&gt;

&lt;h3 id=&#34;side-effect-free-programming&#34;&gt;Side-effect free programming&lt;/h3&gt;

&lt;p&gt;Array higher order functions do not mutate the variable they are called on. This is good, because the loop-based approach using .push and .pop changes it. It means if you pass a variable as a parameter, it’s not suddenly going to get changed by a function down the call stack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// some random module
// obviously no one actually does this
function doesBadSideEffect(arr) {
  return arr.pop();
}


// somewhere quite important
var arr = [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ];

var joinedLetters = &#39;&#39;;

for(var i = 0; i &amp;lt; arr.length; i++) {
  joinedLetters += arr[i];
  doesBadSideEffect(arr)
}

console.log(joinedLetters);
// whoops &#39;ab&#39;
// even though the naming makes us
// expect &#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;declarative-code-optimisations&#34;&gt;Declarative Code Optimisations&lt;/h3&gt;

&lt;p&gt;In some languages functions like map are parallelised. That’s because we don’t actually need to know what’s in the rest of the array to compute this particular element’s new value. If we’re doing complex things in the mapping function then this sort of optimisation could be very useful.&lt;/p&gt;

&lt;h2 id=&#34;effective-functional-javascript&#34;&gt;Effective Functional JavaScript&lt;/h2&gt;

&lt;p&gt;Use first-class and higher order functions to write nicer code more easily. It’s nice and declarative instead of imperative, say what you want done not how to do it&lt;/p&gt;

&lt;p&gt;This will enable you to compose your functions and write code that is extremely terse without losing readability.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: 24/01/2017, rephrased “Callbacks and non-blocking IO” following Anton Alexandrenok’s comments&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Closures, Partial Application and Currying: Effective Functional JavaScript</title>
      <link>https://codewithhugo.com/closures-partial-application-and-currying-effective-functional-javascript/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/closures-partial-application-and-currying-effective-functional-javascript/</guid>
      <description>

&lt;p&gt;Spices and other ingredients of a great curry&lt;/p&gt;

&lt;p&gt;To use JavaScript to its full potential you have to embrace its strong functional programming base. We’re going to explore some crucial and powerful functional constructs: closures, partial application and currying that make JavaScript terse yet understandable.&lt;/p&gt;

&lt;h2 id=&#34;the-basics&#34;&gt;The basics&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;Functional programming&lt;/a&gt; is a programming paradigm that follows a more mathematical computation model. Let’s go through some basics to make your JavaScript more functional.&lt;/p&gt;

&lt;h3 id=&#34;declarative-programming&#34;&gt;Declarative programming&lt;/h3&gt;

&lt;p&gt;Functional programs tend to be declarative (as opposed to imperative), that’s a case of telling the compiler &lt;em&gt;what&lt;/em&gt; you want instead of &lt;em&gt;how&lt;/em&gt; you want it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// imperative style
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;imperative&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// declarative style
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;declarative&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;firstElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above code snippet we’re trying to get the first element of list, the declarative example says what we want, firstElement can do whatever it likes as long as it returns the first element of the passed parameter. Whereas in the imperative style, we say I want index 0 of list explicitly. In JavaScript and at this program size, this doesn’t make a massive difference.&lt;/p&gt;

&lt;p&gt;To build functional programs, we should prefer the declarative style and avoid mutation.&lt;/p&gt;

&lt;h3 id=&#34;recursion-and-higher-order-functions&#34;&gt;Recursion and higher order functions&lt;/h3&gt;

&lt;p&gt;There are no loops in functional programming, just recursion and higher order functions.&lt;/p&gt;

&lt;p&gt;Mechanisms such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Pattern_matching&#34;&gt;pattern matching&lt;/a&gt; allow for easier recursive function declarations. In ECMAScript 6 (the 2015 edition of the standard JavaScript is based on) we’ve added destructuring to the toolbox, which is a basic pattern matching that works for lists. You can read more about it &lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa#.i8rek71hd&#34;&gt;here&lt;/a&gt;.
&lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa&#34;&gt;&lt;strong&gt;Recursion in JavaScript with ES6, destructuring and rest/spread&lt;/strong&gt;
*The latest ECMA standard for JavaScript (ECMAScript 6) makes JavaScript more readable by encouraging a more declarative…*hackernoon.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Higher order functions allow you to traverse iterable collections (Arrays). In JavaScript we have Array#map, Array#filter and Array#reduce. Each of these takes a function as an argument. This is possible because we have first-class functions in JavaScript, which means you can pass them around like any other type of variable :).&lt;/p&gt;

&lt;h3 id=&#34;lambdas-anonymous-functions&#34;&gt;Lambdas (anonymous functions)&lt;/h3&gt;

&lt;p&gt;In JavaScript we can declare lambas (anonymous functions), which is quite handy considering the API of a lot of libraries expects a function as a parameter. We can just declare the function inline. It might mean a bit of a indentation/bracketing problem but inlining until you can generalise or refactor is actually great.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 1, 2, 3 ].map(function(el) {
  return el * 2;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;closures&#34;&gt;Closures&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_A4850B9878B1CEB09AB317E4A152A596BD90A90FBA7AC3DF6929A49CE574E13D_1518553932829_Screen+Shot+2018-02-13+at+20.31.54.png&#34; alt=&#34;Mateusz Zatorski (@matzatorski) - Explain closures in a tweet.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some &amp;gt;140 character explanations of closures, thanks to [Mateusz Zatorski]() for asking and his esteemed followers for answering :).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_A4850B9878B1CEB09AB317E4A152A596BD90A90FBA7AC3DF6929A49CE574E13D_1518553899984_Screen+Shot+2018-02-13+at+20.30.48.png&#34; alt=&#34;Dan Abramov @dan_abramov - A function that can read and write variables outside of it. Even if those are inside other functions.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_A4850B9878B1CEB09AB317E4A152A596BD90A90FBA7AC3DF6929A49CE574E13D_1518553899904_Screen+Shot+2018-02-13+at+20.30.57.png&#34; alt=&#34;Rory Hunter @pugnascotia - A block of code with access to data / variables outwith its scope.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_A4850B9878B1CEB09AB317E4A152A596BD90A90FBA7AC3DF6929A49CE574E13D_1518553899950_Screen+Shot+2018-02-13+at+20.31.04.png&#34; alt=&#34;Ingvar Stepanyan @RReverser - Function bound to outer scope (similarly as it can be bound to object with .bind)&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_A4850B9878B1CEB09AB317E4A152A596BD90A90FBA7AC3DF6929A49CE574E13D_1518553899940_Screen+Shot+2018-02-13+at+20.31.11.png&#34; alt=&#34;Josh Burgess @_joshburgess - functions that &amp;quot;remember&amp;quot; the enviornment (enclosing scope) they were defined within, maintaining access to vars in that scope&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can use closures to put state inside an outer function while having access to that state in an inner function. That state is not global but still accessible to child functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outerFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;someState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;getCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outerFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;someState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ReferenceError: someState is not defined
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The state (&lt;code&gt;someState&lt;/code&gt;) isn’t global since the last statement returns an error. It is however available to the functions it returned, because they can “see” someState, it’s in their lexical scope.&lt;/p&gt;

&lt;h3 id=&#34;function-application&#34;&gt;Function application&lt;/h3&gt;

&lt;p&gt;Function application is the first “hardcore” functional programming concept we’re going to introduce today. It’s a concept that comes from the mathematics world.&lt;/p&gt;

&lt;p&gt;A function application, in JavaScript, can look like a function call but doesn’t have to be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arg1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// function call
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// different ways to apply a function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A function call is an imperative construct whereas a function application belongs to the realm of functional programming and mathematics.&lt;/p&gt;

&lt;p&gt;In JavaScript you can even use apply and call to define what this will be set to during the application.&lt;/p&gt;

&lt;h2 id=&#34;partial-application&#34;&gt;Partial application&lt;/h2&gt;

&lt;p&gt;Partial application is when you apply some of the required parameters of a function and return a function that takes the rest of the parameters.&lt;/p&gt;

&lt;p&gt;We’re going to flip the parameters to the map function. Instead of taking parameters &lt;code&gt;(list, fn)&lt;/code&gt; it’s going to take &lt;code&gt;(fn, list)&lt;/code&gt;. This is to illustrate the value of partial application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;functionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;partialFunctionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;functionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Example 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Let&amp;#39;s apply all the arguments at once
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;functionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;functionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Example 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Let&amp;#39;s apply them one at a time
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doubleListItems&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;partialFunctionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;doubleListItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;doubleListItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What the code does in example 1 is less obvious than in example 2. You have to read what the lamba does instead of being told by the variable function name.&lt;/p&gt;

&lt;p&gt;This is something we can use in places like React event handlers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyComponent&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;partialHandleLinkClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;activeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hasKeyboardModifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrlKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shiftKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;altKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metaKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;updateType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;activeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hasKeyboardModifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Bar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Baz&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;{i}&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;na&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;{this.partialHandleLinkClick(type,&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;this.props.activeType&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;gt;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if we went the Object-oriented route, we would use &lt;code&gt;.bind&lt;/code&gt; &lt;code&gt;partialHandleClick&lt;/code&gt; function to the component instance (&lt;code&gt;this&lt;/code&gt;) and to be able to access &lt;code&gt;this.props.activeType&lt;/code&gt; from inside &lt;code&gt;partialHandleClick&lt;/code&gt;.
We’re trying to leverage functional programming, so no accessing this from all the way inside an event handler.
We get to store some information that we can get at &lt;code&gt;.map&lt;/code&gt; time (which type is this handler for).
When the event triggers, we get the final parameter we need &lt;code&gt;e&lt;/code&gt; (the event object) and the handler can finish applying.&lt;/p&gt;

&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;

&lt;p&gt;A curried function is a function that you apply 1 parameter at a time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;partialFunctionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;functionalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;partialFunctionalMap&lt;/code&gt; is curried.
In the event handler example &lt;code&gt;partialHandleLinkClick&lt;/code&gt; isn’t, since the first application provided 2 parameters.&lt;/p&gt;

&lt;p&gt;We could rewrite it though.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;curriedHandleLinkClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;activeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hasKeyboardModifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrlKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shiftKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;altKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metaKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;updateType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;activeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hasKeyboardModifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we would use &lt;code&gt;this.curriedHandleLinkClick(type)(this.props.activeType)&lt;/code&gt; instead of &lt;code&gt;this.partialHandleLinkClick(type, this.props.activeType)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This isn’t as pretty in JavaScript as in other languages since we’re replacing &lt;code&gt;(arg1, arg2, arg3)&lt;/code&gt; with &lt;code&gt;(arg1)(arg2)(arg3)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;currying-and-partial-application&#34;&gt;Currying and partial application&lt;/h2&gt;

&lt;p&gt;Currying is strict: a curried function &lt;strong&gt;always&lt;/strong&gt; applied 1 parameter at a time. Partial application is not this strict.&lt;/p&gt;

&lt;p&gt;A curried function tends to be partially applied but a partially applied function does &lt;strong&gt;not&lt;/strong&gt; have to be curried.&lt;/p&gt;

&lt;p&gt;This means we can automate the currying process.&lt;/p&gt;

&lt;p&gt;In JavaScript we can use libraries to curry functions with multiple arguments. &lt;a href=&#34;https://lodash.com/docs#curry&#34;&gt;Lodash has a curry function&lt;/a&gt; and &lt;a href=&#34;http://ramdajs.com/docs/#curry&#34;&gt;so does Ramda&lt;/a&gt;. They take a function and when applied with a parameter either returns if all required arguments are present or returns a curried function that accepts the rest of the arguments.&lt;/p&gt;

&lt;p&gt;You can also write your own by accessing the arguments object of the function and using Function#apply. Here are a couple of tutorials that take you through this process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@kbrainwave/currying-in-javascript-ce6da2d324fe&#34;&gt;&lt;strong&gt;Currying in JavaScript&lt;/strong&gt; A technique using partial evaluation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevvv.in/currying-in-javascript/&#34;&gt;&lt;strong&gt;Currying in JavaScript&lt;/strong&gt;- Kevin Ennis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some languages like Haskell are auto-curried. This means that if the function application does not provide the required number of parameters, it will return a function which will accept the rest of the parameters one at a time, just like the &lt;a href=&#34;https://lodash.com/&#34;&gt;Lodash&lt;/a&gt; and &lt;a href=&#34;http://ramdajs.com/&#34;&gt;Ramda&lt;/a&gt; curry functions do. Another cool thing in Haskell is that partial application looks like non-partial application and curried function calls aren’t ugly, since the separator for parameters is a space.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;b&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;effective-functional-javascript-recipe&#34;&gt;Effective Functional JavaScript Recipe&lt;/h2&gt;

&lt;p&gt;Use and abuse closures, partial application and currying.&lt;/p&gt;

&lt;p&gt;This will enable you to compose your functions and write code that is extremely terse without losing readability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 minute JavaScript: Library development in ES6 with Babel, Mocha and npm scripts</title>
      <link>https://codewithhugo.com/10-minute-javascript-library-development-in-es6-with-babel-mocha-and-npm-scripts/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/10-minute-javascript-library-development-in-es6-with-babel-mocha-and-npm-scripts/</guid>
      <description>

&lt;p&gt;JavaScript has a thriving ecosystem of libraries delivered as packages on npm. Node has a high degree of compatibility with ES6 but it doesn’t have some features yet, namely import. This means that if we want to distribute useable packages over npm and we want to be writing ES6, we have to transpile back to ES5.&lt;/p&gt;

&lt;p&gt;We’ll be setting up a project that allows us to write ES6, and distribute it in ES5 (with Babel) and to test it with Mocha, all through npm scripts. We’ll also discuss some workflows that we can use to speed up our development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Use this package.json, create a src folder, add an index.js and some .js and .test.js files inside it and off you go. You can also check out &lt;a href=&#34;https://github.com/HugoDF/recursive-js&#34;&gt;https://github.com/HugoDF/recursive-js&lt;/a&gt;, it’s a decent example project. :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;library-js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Starter for library development with ES6, Babel, Mocha and npm scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./dist/index.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm run dev&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm test -- -w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;init&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mkdir dist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;clean&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rm -rf dist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;prebuild&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm run clean &amp;amp;&amp;amp; npm run init&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;babel ./src -d ./dist --ignore test.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;pretest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm run build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mocha --compilers js:babel-core/register ./src/**/*.test.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;test:single&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mocha --compilers js:babel-core/register&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hugo Di Francesco&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;babel-cli&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^6.16.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;babel-core&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^6.17.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;babel-preset-es2015&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^6.16.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;chai&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^3.5.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;mocha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^3.1.2&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;why-npm-scripts&#34;&gt;Why npm scripts?&lt;/h2&gt;

&lt;p&gt;npm scripts live in your package.json. This means you don’t have to create a new configuration file just to run your tasks.&lt;/p&gt;

&lt;p&gt;These scripts use the packages installed inside the project ( ./node_modules). This means you don’t have to install dependencies globally just to build your project.&lt;/p&gt;

&lt;p&gt;This setup makes it easy to compose your tasks. For example our build task will require both build:js and test to run but we can run the JavaScript build and the tests independently as well.&lt;/p&gt;

&lt;p&gt;There are also built-in pre and post hooks like pretest, preinstall or postpublish.&lt;/p&gt;

&lt;h2 id=&#34;basic-boilerplate&#34;&gt;Basic boilerplate&lt;/h2&gt;

&lt;p&gt;We’re creating a library that implements map, filter and reduce in a recursive manner using ES6.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To learn more about these functions you can read this post:&lt;/em&gt;
&lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa&#34;&gt;&lt;strong&gt;Recursion in JavaScript with ES6, destructuring and rest/spread&lt;/strong&gt;
&lt;em&gt;The latest ECMA standard for JavaScript (ECMAScript 6) makes JavaScript more readable&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll runnpm init to generate a package.json that we will add our project scripts and dependencies to.&lt;/p&gt;

&lt;p&gt;Our package.json should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;recursive-js&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Recursive JavaScript with ES6, destructuring and rest/spread&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Hugo Di Francesco&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Describes an &lt;em&gt;npm script&lt;/em&gt; that can be called using npm run test. Since tests are run often, npm is kind enough to also alias npm test and npm t to npm run test. We can try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm t
&amp;gt; recursive-js@1.0.0 test
&amp;gt; echo &amp;quot;Error: no test specified&amp;quot; &amp;amp;&amp;amp; exit 1

Error: no test specified
npm ERR! Test failed.  See above for more details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which errors out, as expected since we don’t have any tests set up.&lt;/p&gt;

&lt;p&gt;We should create a src directory that will contain our code, as well as a couple of files in there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir src
$ touch src/index.js src/map.js src/filter.js src/reduce.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can check that they’ve been created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls src
filter.js index.js map.js reduce.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s now put some ES6 code in our files (for more details on how these functions were implemented see &lt;a href=&#34;https://hackernoon.com/recursion-in-javascript-with-es6-destructuring-and-rest-spread-4b22ae5998fa&#34;&gt;Recursive JavaScript with ES6, destructuring and rest/spread&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;initial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;initial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newHead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right now none of these functions can be loaded into another file, we’ll use ES6 default export to expose the functions so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// map.js
export function map() { /* ... */ }

// filter.js
export function filter() { /* ... */ }

// reduce.js
export function reduce() { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node hasn’t implemented this export syntax yet (you can &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&#34;&gt;find out more about it on MDN&lt;/a&gt;), so we’ll need to transpile the code back to ES5 using something like Babel so that everyone using our package on npm is able to load it.&lt;/p&gt;

&lt;p&gt;Let’s create a single entry point to all the functions in index.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// index.js
export * from &#39;./map&#39;;
export * from &#39;./filter&#39;;
export * from &#39;./reduce&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;initialise-and-teardown-tasks&#34;&gt;Initialise and teardown tasks&lt;/h2&gt;

&lt;p&gt;We will store our code *source *(ES6) in the src directory and the transpiled, &lt;em&gt;distributable&lt;/em&gt; version of the code in a dist directory.&lt;/p&gt;

&lt;p&gt;Let’s start adding some npm scripts:&lt;/p&gt;

&lt;h3 id=&#34;init&#34;&gt;init&lt;/h3&gt;

&lt;p&gt;We’ll create the dist folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;init&amp;quot;: &amp;quot;mkdir dist&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run init

&amp;gt; recursive-js@1.0.0 init
&amp;gt; mkdir dist

$ ls
dist package.json src
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;clean&#34;&gt;clean&lt;/h3&gt;

&lt;p&gt;In this task we’ll want to remove the dist folder and all its content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;clean&amp;quot;: &amp;quot;rm -rf dist&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls 
dist package.json src

$ npm run clean

&amp;gt; recursive-js@1.0.0 init
&amp;gt; rm -rf dist

$ ls
package.json src
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;prebuild&#34;&gt;prebuild&lt;/h3&gt;

&lt;p&gt;Before building we’ll want to reset the dist folder. We can easily do this by deleting it and recreating it. Using the &amp;amp;&amp;amp; operator, we express that the first operation should complete successfully before the second one&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;prebuild&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a case of a pre hook. This runs before the build task every time we run npm run build at the command line. Unfortunately we don’t have a build task yet but we can check that it works properly by running the right-hand operation at the command line (in sh or bash).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run clean &amp;amp;&amp;amp; npm run init

&amp;gt; recursive-js@1.0.0 clean
&amp;gt; rm -rf dist

&amp;gt; recursive-js@1.0.0 init
&amp;gt; mkdir dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our package.json now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;recursive-js&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Recursive JavaScript with ES6, destructuring and rest/spread&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;init&amp;quot;: &amp;quot;mkdir dist&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;rm -rf dist&amp;quot;,
    &amp;quot;prebuild&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run init&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Hugo Di Francesco&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-your-javascript-with-babel&#34;&gt;Building your JavaScript with Babel&lt;/h2&gt;

&lt;p&gt;To compile ES6 to ES5 we’ll need Babel. Install and save babel-cli and babel-preset-es2015 as devDependencies from npm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev babel-cli babel-preset-es2015
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-only-one-file&#34;&gt;Build only one file&lt;/h3&gt;

&lt;p&gt;The Babel CLI command to compile one file takes an argument (source file) and a couple of flags ( -o for output file and &amp;ndash;presets for Babel presets):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ babel ./src/index.js -o ./dist/index.js --presets es2015
# compiles ./src/index.js to ES5 in ./dist/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could add this to package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;build:single&amp;quot;: &amp;quot;babel ./src/index.js -o ./dist/index.js --presets es2015&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However we want to transpile all the files.&lt;/p&gt;

&lt;h3 id=&#34;build-all-files&#34;&gt;Build all files&lt;/h3&gt;

&lt;p&gt;The flag to compile all files in a directory to a set output directory is -d, the command is therefore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ babel src -d dist --presets es2015 
# you need babel-cli installed globally for this to work

src/filter.js -&amp;gt; dist/filter.js
src/index.js -&amp;gt; dist/index.js
src/map.js -&amp;gt; dist/map.js
src/reduce.js -&amp;gt; dist/reduce.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add it to the package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;build&amp;quot;: &amp;quot;babel src -d dist --presets es2015&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can test it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run build

&amp;gt; recursive-js@1.0.0 prebuild 
&amp;gt; npm run clean &amp;amp;&amp;amp; npm run init

&amp;gt; recursive-js@1.0.0 clean 
&amp;gt; rm -rf dist

&amp;gt; recursive-js@1.0.0 init 
&amp;gt; mkdir dist

&amp;gt; recursive-js@1.0.0 build 
&amp;gt; babel ./src -d ./dist --presets es2015

src/filter.js -&amp;gt; dist/filter.js
src/index.js -&amp;gt; dist/index.js
src/map.js -&amp;gt; dist/map.js
src/reduce.js -&amp;gt; dist/reduce.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how prebuild gets run before build, just like we said. :)&lt;/p&gt;

&lt;p&gt;We should also change the &amp;ldquo;main&amp;rdquo; property of our package.json to ./dist/index.js.&lt;/p&gt;

&lt;p&gt;Current state of package.json:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;recursive-js&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Recursive JavaScript with ES6, destructuring and rest/spread&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;./dist/index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;init&amp;quot;: &amp;quot;mkdir dist&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;rm -rf dist&amp;quot;,
    &amp;quot;prebuild&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run init&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;babel ./src -d ./dist --presets es2015&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Hugo Di Francesco&amp;quot;,
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-cli&amp;quot;: &amp;quot;^6.16.0&amp;quot;,
    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.16.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-your-tests-with-mocha&#34;&gt;Running your tests with Mocha&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://mochajs.org/&#34;&gt;*Mocha is a feature-rich JavaScript test framework&lt;/a&gt; *that we’ll use to &lt;strong&gt;run&lt;/strong&gt; the tests we write for our library. We’ll also use the &lt;a href=&#34;http://chaijs.com/&#34;&gt;*Chai Assertion Library&lt;/a&gt;* to &lt;strong&gt;write&lt;/strong&gt; our tests using the expect style. So we need to install both of these libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev mocha chai
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-the-environment-ready&#34;&gt;Getting the environment ready&lt;/h3&gt;

&lt;p&gt;Mocha is able to run ES6 tests but we need to have babel-core available, so we should install that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-core
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we did say that we didn’t need configuration files for Babel but it’s just easier to create one for consistency across library and testing presets, put this in a file called .babelrc in the root of your project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are currently multiple ways to separate the test files from the library source files. One of them is to use a test folder, the other is to name all the test files *.test.js. We’ll demonstrate how to use the latter style (the difference between the two is just a case of changing a UNIX-style path).&lt;/p&gt;

&lt;h3 id=&#34;adding-some-tests&#34;&gt;Adding some tests&lt;/h3&gt;

&lt;p&gt;We’ll add some tests for map.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { expect } from &#39;chai&#39;;

import { map } from &#39;./map&#39;;

describe(&#39;map&#39;, () =&amp;gt; {
  it(&#39;should maintain array length&#39;, () =&amp;gt; {
    const arr = [ 1, 2, 3 ];
    expect(map(arr, x =&amp;gt; x*2)).to.have.length(arr.length);
  });
  it(&#39;should return an empty array when passed an empty array&#39;, () =&amp;gt; {
    expect(map([], x =&amp;gt; x*2)).to.deep.equal([]);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this under ./src/map.test.js.&lt;/p&gt;

&lt;p&gt;And some tests for filter.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { expect } from &#39;chai&#39;;

import { filter } from &#39;./filter&#39;;

describe(&#39;filter&#39;, () =&amp;gt; {
  it(&#39;should remove items that don\&#39;t evaluate to true when passed to predicate function&#39;, () =&amp;gt; {
    const arr = [ 1, 2, 3 ];
    const expected = [ 2, 3 ];
    expect(filter(arr, x =&amp;gt; x &amp;gt; 1)).to.deep.equal(expected);
  });
  it(&#39;should return an empty array when passed an empty array&#39;, () =&amp;gt; {
    expect(filter([], x=&amp;gt; x === 1)).to.deep.equal([]);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-all-the-tests&#34;&gt;Run all the tests&lt;/h3&gt;

&lt;p&gt;We could theoretically run this at the command line, it’s a valid mocha command, although depending on how our machine is currently set up it may complain about some missing dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mocha --compiler js:babel-core ./src/**/*.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we pop that into our package.json replacing the test line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;test&amp;quot;: &amp;quot;mocha --compiler js:babel-core ./src/**/*.test.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now try running the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm t

&amp;gt; recursive-js@1.0.0 test 
&amp;gt; mocha --compilers js:babel-core/register ./src/**/*.test.js

filter
    ✓ should remove items that don&#39;t evaluate to true when passed to predicate function
    ✓ should return an empty array when passed an empty array

map
    ✓ should maintain array length
    ✓ should return an empty array when passed an empty array

4 passing (293ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of which pass! :)&lt;/p&gt;

&lt;h3 id=&#34;running-a-single-test-file&#34;&gt;Running a single test file&lt;/h3&gt;

&lt;p&gt;The path passed to the npm run command will be forwarded recursively so if we want to run just one test (and we want to pass a path):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mocha --compiler js:babel-core &amp;quot;./src/map.test.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can call this test:single:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// package.json in the &amp;quot;scripts&amp;quot; JSON object
&amp;quot;test:single&amp;quot;: &amp;quot;mocha --compiler js:babel-core&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run test:single ./src/map.test.js

&amp;gt; recursive-js@1.0.0 test:single
&amp;gt; mocha --compilers js:babel-core/register &amp;quot;./src/map.test.js&amp;quot;

map
    ✓ should maintain array length
    ✓ should return an empty array when passed an empty array

2 passing (279ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-a-test-folder&#34;&gt;Using a &lt;code&gt;test&lt;/code&gt; folder&lt;/h3&gt;

&lt;p&gt;Left as homework to work out the kinks, but the path is should be something like ./test/*&lt;em&gt;/&lt;/em&gt;.js.&lt;/p&gt;

&lt;h3 id=&#34;cleaning-up-the-build-task&#34;&gt;Cleaning up the “build” task&lt;/h3&gt;

&lt;p&gt;We can remove &amp;ndash;presets es2015 from the build task since we’ve added a .babelrc.&lt;/p&gt;

&lt;p&gt;Let’s check that the build task still works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run build

&amp;gt; recursive-js@1.0.0 prebuild
&amp;gt; npm run clean &amp;amp;&amp;amp; npm run init

&amp;gt; recursive-js@1.0.0 clean
&amp;gt; rm -rf dist

&amp;gt; recursive-js@1.0.0 init
&amp;gt; mkdir dist

&amp;gt; recursive-js@1.0.0 build
&amp;gt; babel ./src -d ./dist --presets es2015

src/filter.js -&amp;gt; dist/filter.js
src/filter.test.js -&amp;gt; dist/filter.test.js
src/index.js -&amp;gt; dist/index.js
src/map.js -&amp;gt; dist/map.js
src/map.test.js -&amp;gt; dist/map.test.js
src/reduce.js -&amp;gt; dist/reduce.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works but:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/filter.test.js -&amp;gt; dist/filter.test.js
src/map.test.js -&amp;gt; dist/map.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means it copies the test files over to dist which we don’t really need or want. Thankfully there’s a babel-cli flag for this, &amp;ndash;ignore. We also now have a .babelrc so we don’t need to specify our &amp;ndash;presets at the command line.&lt;/p&gt;

&lt;p&gt;We can change build to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;build&amp;quot;: &amp;quot;babel ./src -d ./dist --ignore test.js&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our final package.json is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;recursive-js&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Recursive JavaScript with ES6, destructuring and rest/spread&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;./dist/index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;init&amp;quot;: &amp;quot;mkdir dist&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;rm -rf dist&amp;quot;,
    &amp;quot;prebuild&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run init&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;babel ./src -d ./dist --ignore test.js&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;mocha --compilers js:babel-core/register ./src/**/*.test.js&amp;quot;,
    &amp;quot;test:single&amp;quot;: &amp;quot;mocha --compilers js:babel-core/register&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Hugo Di Francesco&amp;quot;,
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-cli&amp;quot;: &amp;quot;^6.16.0&amp;quot;,
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.17.0&amp;quot;,
    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.16.0&amp;quot;,
    &amp;quot;chai&amp;quot;: &amp;quot;^3.5.0&amp;quot;,
    &amp;quot;mocha&amp;quot;: &amp;quot;^3.1.2&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;workflow-suggestions&#34;&gt;Workflow suggestions&lt;/h2&gt;

&lt;h3 id=&#34;build-the-code-before-every-test&#34;&gt;Build the code before every test&lt;/h3&gt;

&lt;p&gt;A lot of library development work is going to be test-driven (or at the command line). It’s a good idea to rebuild your dist files so that you don’t commit stale code (ie you actually commit what you were testing).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;pretest&amp;quot;: &amp;quot;npm run build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was easy! Thanks to the the hooks npm scripts provide out of the box, all we had to do was add the command we would like to be run before tests run.&lt;/p&gt;

&lt;h3 id=&#34;build-the-code-run-tests-as-you-write&#34;&gt;Build the code/run tests as you write&lt;/h3&gt;

&lt;p&gt;We can add the following npm scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;npm run dev&amp;quot;,
&amp;quot;dev&amp;quot;: &amp;quot;npm test -- -w&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re aliasing dev to start because start is one of the few scripts we can call without using npm run we can just do npm start (the other commands for which this works are: test, stop and restart).&lt;/p&gt;

&lt;p&gt;&amp;ndash; in npm scripts means “pass the following arguments straight to the called npm script”:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run dev

&amp;gt; recursive-js@1.0.0 dev
&amp;gt; npm test -- -w

&amp;gt; recursive-js@1.0.0 pretest
&amp;gt; npm run build

&amp;gt; recursive-js@1.0.0 prebuild
&amp;gt; npm run clean &amp;amp;&amp;amp; npm run init

&amp;gt; recursive-js@1.0.0 clean
&amp;gt; rm -rf dist

&amp;gt; recursive-js@1.0.0 init
&amp;gt; mkdir dist

&amp;gt; recursive-js@1.0.0 build
&amp;gt; babel ./src -d ./dist --ignore test.js

src/filter.js -&amp;gt; dist/filter.js
src/index.js -&amp;gt; dist/index.js
src/map.js -&amp;gt; dist/map.js
src/reduce.js -&amp;gt; dist/reduce.js

&amp;gt; recursive-js@1.0.0 test
&amp;gt; mocha --compilers js:babel-core/register ./src/**/*.test.js **&amp;quot;-w&amp;quot;**

filter
    ✓ should remove items that don&#39;t evaluate to true when passed to predicate function
    ✓ should return an empty array when passed an empty array

map
    ✓ should maintain array length
    ✓ should return an empty array when passed an empty array

4 passing (274ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The -w option for mocha will watch for file changes and rerun the command when they do. Which means our builds and tests get run automatically whenever anything changes.&lt;/p&gt;

&lt;h3 id=&#34;use-the-files-field-to-describe-what-files-should-be-installed&#34;&gt;Use the &lt;code&gt;files&lt;/code&gt; field to describe what files should be installed&lt;/h3&gt;

&lt;p&gt;This is about being a good package maintainer. Just like we don’t babel-compile our tests into the dist folder, we should keep as much code out of the version of the package that is npm-installed by the end user.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;files&amp;rdquo; field in package.json allows us to specify which files are required by the end user. In our case it’s just the dist folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;files&amp;quot;: [
  &amp;quot;dist&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: instead of whitelisting which files we need, we could also blacklist items using an .npmignore file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that’s how to use npm scripts, Babel and Mocha to create a library using ES6 :). Feel free to write a reply with any questions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>