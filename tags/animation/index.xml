<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/animation/</link>
    <description>Recent content in Animation on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 21 Jan 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Animations: CSS vs JavaScript</title>
      <link>https://codewithhugo.com/animations-css-vs-javascript/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/animations-css-vs-javascript/</guid>
      <description>

&lt;h3 id=&#34;when-should-you-use-javascript-when-you-can-use-css&#34;&gt;&lt;em&gt;When should you use JavaScript when you can use CSS?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This post was sparked by a question I answered on Quora:
&lt;a href=&#34;https://www.quora.com/Which-is-better-to-use-CSS-or-JS&#34;&gt;&lt;strong&gt;Which is better to use, CSS or JS?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web frontend is built with the triumvirate of HTML, CSS and JavaScript (see &lt;a href=&#34;https://hackernoon.com/in-simple-terms-backend-code-frontend-code-and-how-they-interact-2485c5a1bbd2&#34;&gt;‚ÄúBackend code, frontend code and how they interact‚Äù&lt;/a&gt; for more details): HTML says what things are, CSS how they look and JavaScript does all the things the other two can‚Äôt.&lt;/p&gt;

&lt;p&gt;Seeing it from this light the answer to the question: ‚ÄúWhen should you use JavaScript when you can use CSS?‚Äù is &lt;strong&gt;never&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;HTML, CSS and JavaScript do overlap especially since HTML5 and CSS3. Animations before CSS3 used to be the premise of the JavaScript and complex animation orchestration still is with libraries like GSAP, but nowadays we can also animate using the transition CSS rule.&lt;/p&gt;

&lt;p&gt;This leads us to formulate some rules around using JavaScript in the browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if you can do something with CSS over JavaScript, do it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if you can do something with HTML over JavaScript, do it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;There are a few reasons why you should try to leverage the browser‚Äôs CSS engine instead of hand-rolling animations, focused states and so on.&lt;/p&gt;

&lt;p&gt;This stems from the principle of writing code that is as simple as possible, but not too simple. CSS and HTML‚Äôs declarative natures lends them to writing concise, robust and maintainable code. Since JavaScript can do so much and break so many different ways, the less of it you write, the less likely you are to run into issues.&lt;/p&gt;

&lt;h2 id=&#34;1-resilience&#34;&gt;1. Resilience&lt;/h2&gt;

&lt;p&gt;CSS and HTML try their hardest to self-remedy. They‚Äôre super robust: one broken CSS rule doesn‚Äôt crash your whole web-app, a missing tag might break your layout but except in extreme cases it won‚Äôt stop your site from loading.&lt;/p&gt;

&lt;p&gt;One JavaScript syntax error or a missing null/undefined check on a field before using it (eg. myObj.something when myObj is null/undefined) will crash your whole app, forcing your user to refresh the whole thing and possibly losing some work in the process.&lt;/p&gt;

&lt;h2 id=&#34;2-optimisation&#34;&gt;2. Optimisation&lt;/h2&gt;

&lt;p&gt;Since CSS is declarative there is a lot more scope for optimisation. The browser can sometimes use hardware acceleration to do CSS things.&lt;/p&gt;

&lt;p&gt;It can also optimise things like not computing off-screen element‚Äôs styles or run their animations.&lt;/p&gt;

&lt;p&gt;JavaScript doesn‚Äôt have access to these kinds of APIs out of the box.&lt;/p&gt;

&lt;h2 id=&#34;3-easy-and-costly-to-get-wrong&#34;&gt;3. Easy and costly to get wrong&lt;/h2&gt;

&lt;p&gt;Beyond the fact that JavaScript is less resilient than CSS, even relatively well-written JavaScript can do things like locking the UI or even crash the browser (especially low-end ones).&lt;/p&gt;

&lt;p&gt;With CSS, non-CSS3 compliant browsers aka pretty-damn-old-browser-that-you-dont-use-any-more-but-your-users-mightwill just ignore the transition rule, so &lt;em&gt;by default&lt;/em&gt; you have graceful degradation. In JavaScript you would have to detect that the user is running old or low-spec hardware, making it an &lt;em&gt;opt-in&lt;/em&gt; to graceful degradation‚Ä¶ I know which one I prefer.&lt;/p&gt;

&lt;h2 id=&#34;4-cost-of-javascript&#34;&gt;4. Cost of JavaScript&lt;/h2&gt;

&lt;p&gt;A whole lot more sites need CSS more than they need JavaScript. That‚Äôs why despite ‚ÄúBest Practices‚Äù a lot of developers (a lot = ‚ÄúI‚Äôm guilty of this‚Äù), still load their styles in the head even though they load their scripts at the end of the body.&lt;/p&gt;

&lt;p&gt;CSS is also quite cheap to interpret since it‚Äôs declarative, you can parallelise the creation of the in-memory representation of styles (since each selector in the CSS can be interpreted in parallel) and also defer calculation of the final styles until when the elements are painted.&lt;/p&gt;

&lt;p&gt;JavaScript, since it‚Äôs a general purpose programming language‚Ä¶ just like CSS has to be loaded, but it also has to be parsed and JIT-compiled as well as run. Which means for the same amount (in terms of size on disk) of CSS and JavaScript, JavaScript costs more to your users in terms of hardware time.&lt;/p&gt;

&lt;h2 id=&#34;5-cost-of-maintenance-and-added-dependencies&#34;&gt;5. Cost of maintenance and added dependencies&lt;/h2&gt;

&lt;p&gt;Loading in a JavaScript animation library costs you in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;you‚Äôre adding a dependency with its own API, which means potentially more things to learn for anyone looking to maintain the code after you&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you‚Äôre loading a dependency, adding to your JavaScript load/parse/run startup cost&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS animations and detecting DOM state using pseudo-classes costs you nothing both in terms of loading and not incurring a dependency since CSS and HTML are backed by web standards. It‚Äôs very likely any new developers will be familiar with CSS animations, and if they‚Äôre not, they should be.&lt;/p&gt;

&lt;p&gt;Feel free to get in touch with me on Twitter &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leave some üëèüèª if you enjoyed this, and here are some posts you might be interested in:
- &lt;a href=&#34;https://medium.com/@hugo__df/why-css-is-hard-89f3b221dd4d&#34;&gt;&lt;strong&gt;Why CSS is hard&lt;/strong&gt;, Things we‚Äôre not used to tend to be harder&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://hackernoon.com/learn-git-even-if-you-dont-code-89c521f4209b&#34;&gt;&lt;strong&gt;Learn git even if you don‚Äôt code&lt;/strong&gt;, The tools we wield define us, git is the one tool all developers use&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://medium.com/@hugo__df/7-reasons-you-should-be-hosted-on-aws-9312e40ee323&#34;&gt;&lt;strong&gt;7 reasons you should be hosted on AWS&lt;/strong&gt;, Amazon Web Services is one of the leading hosting providers, here‚Äôs why.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>