<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/git/</link>
    <description>Recent content in Git on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 01 Aug 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learn git even if you don‚Äôt code</title>
      <link>https://codewithhugo.com/learn-git-even-if-you-dont-code/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/learn-git-even-if-you-dont-code/</guid>
      <description>&lt;p&gt;The tools we wield define us, git is the one tool all developers use&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Git is a ubiquitous version control tool. The way it works tightly correlates with software engineering and the mindsets of developers. It was purpose-built and designed to be used for the development of the Linux Kernel, one of the largest software projects that‚Äôs depended on by millions of developers.&lt;/p&gt;

&lt;h2 id=&#34;your-editing-workflow-is-painful-because-it-s-not-version-controlled&#34;&gt;Your editing workflow is painful because it‚Äôs not version-controlled&lt;/h2&gt;

&lt;p&gt;As part of a team, your editing workflow probably consists of sending a file back and forth for review, comment and amendments. In a programmer‚Äôs eyes, this is a crazy inefficient way to work. In addition, the likelihood an edit will be lost or overwritten is high.&lt;/p&gt;

&lt;p&gt;With git, that doesn‚Äôt happen any more. If only everyone used git, no more lost comments or amendments.&lt;/p&gt;

&lt;p&gt;That‚Äôs wishful thinking of course but understanding how git works with branches, commits and so on will help you use the tools you already use more efficiently.&lt;/p&gt;

&lt;p&gt;Reflexes like using the ‚Äúlatest‚Äù version of the document and re-applying your changes to it methodically will radically change the way you approach collaborative editing.&lt;/p&gt;

&lt;h2 id=&#34;designed-for-a-distributed-team&#34;&gt;Designed for a distributed team&lt;/h2&gt;

&lt;p&gt;In a remote, remote-friendly or a company that outsources any work, you know how long and arduous the revision process can be. Git was designed to help this process, many tools in the ecosystem around git have a concept of grouped changes that should be reviewed together (what GitHub calls Pull Requests).&lt;/p&gt;

&lt;p&gt;Git becomes your one source of truth, everyone has it locally but it‚Äôs also all online.&lt;/p&gt;

&lt;h2 id=&#34;proven-solutions-to-scale-problems&#34;&gt;Proven solutions to scale problems&lt;/h2&gt;

&lt;p&gt;As one person the versioning process is ‚Äúeasy‚Äù. Adding another contributor can change the way you work massively. Now imaging going from 1 to over 1,500. That‚Äôs what the Linux Kernel did, from just Linus to thousands of contributors from companies such as Intel, IBM and Samsung.&lt;/p&gt;

&lt;p&gt;Processes around git allow it to scale with your team and your project. Workflows like taking a section of work and integrating it after review are great even if you‚Äôre not using git. Having a version-control mindset and approach to this problem will help even with the less than optimal tools.&lt;/p&gt;

&lt;h2 id=&#34;a-complex-tool-with-simple-actions-the-unix-philosophy&#34;&gt;A complex tool with simple actions: the UNIX philosophy&lt;/h2&gt;

&lt;p&gt;Git is actually relatively complex as a tool. Most of it was designed under the UNIX philosophy that tools should do one thing well and then be composed (or strung) together to do more complex actions.&lt;/p&gt;

&lt;p&gt;This stands quite true of git despite not being true of all the actions you may run. Some things aren‚Äôt quite intuitive but they‚Äôre there if you remember them.&lt;/p&gt;

&lt;p&gt;Git wraps concepts that most non-developers can grasp in developer-friendly packaging.&lt;/p&gt;

&lt;p&gt;Due to the accessibility of version control as a business problem, learning to use git is an introduction to the command line that is more understandable. Non-developers could probably see themselves using git (even if they never end up doing so)&lt;/p&gt;

&lt;h2 id=&#34;working-in-the-open&#34;&gt;Working in the Open&lt;/h2&gt;

&lt;p&gt;Open Source projects usually use git and hosting platforms like GitHub, GitLab or BitBucket. The first obvious project to use it is the Linux Kernel, which is one of the biggest Open Source Software projects out there.&lt;/p&gt;

&lt;p&gt;Understanding git means you understand how developers from around the world in different timezones and with different backgrounds can collaborate.&lt;/p&gt;

&lt;p&gt;Hopefully you now understand how git can be considered more than just a version control tool.&lt;/p&gt;

&lt;p&gt;If you want to learn more about git, I‚Äôve written a course specifically for this purpose, you can find it at the following link for free if you sign up: &lt;a href=&#34;http://skl.sh/2zNN3En&#34;&gt;Git for Creatives&lt;/a&gt; (&lt;a href=&#34;http://skl.sh/2zNN3En&#34;&gt;http://skl.sh/2zNN3En&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Feel free to get in touch with me on Twitter &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leave some üëèüèª if you enjoyed this.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split an existing git commit</title>
      <link>https://codewithhugo.com/split-an-existing-git-commit/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/split-an-existing-git-commit/</guid>
      <description>&lt;p&gt;One of &lt;code&gt;git&lt;/code&gt;&amp;rsquo;s main differences when compared to other version control systems is that it lets the user rewrite the history. The main way to do this is to use &lt;code&gt;git rebase&lt;/code&gt;, usually followed by a &lt;code&gt;git push&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;force&lt;/code&gt; to overwrite history the remote with the local history.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a look at how to split existing commits using &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Say you have two files edited in a commit (A and B) and you would like to get the changes from one of those files (A) into your current branch but not those from the other (B).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;git cherry-pick &amp;lt;commit-hash&amp;gt;&lt;/code&gt; is not an option since it would pull in the changes for both A and B.&lt;/p&gt;

&lt;p&gt;The solution is to split the commit into 2 and only cherry-pick the new commit that contains changes for A.&lt;/p&gt;

&lt;p&gt;To do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;git rebase -i &amp;lt;commit-hash&amp;gt;~&lt;/code&gt; (note the &lt;code&gt;~&lt;/code&gt;) or &lt;code&gt;git rebase -i &amp;lt;hash-of-previous-commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;find the commit you want to split in the rebase edit screen, change the &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt; (&lt;code&gt;edit&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;save and exit (&lt;code&gt;ESC&lt;/code&gt; followed by &lt;code&gt;:wq&lt;/code&gt; to close VIM)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD~&lt;/code&gt; to reset the staged changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add [files-to-add]&lt;/code&gt; all the files we want to add to the first commit (here would be &lt;code&gt;git add A&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; normally, with a message etc&lt;/li&gt;
&lt;li&gt;Run as many other rounds of as you want commits:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add [other-files-to-add]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;continue&lt;/code&gt; to indicate that the splitting has been finished and to continue the rebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally we can &lt;code&gt;git cherry-pick &amp;lt;new-commit-hash&amp;gt;&lt;/code&gt; to get the changes into our branch&lt;/p&gt;

&lt;p&gt;For any questions about using git, feel free to comment below or tweet to me &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover photo by &lt;a href=&#34;https://unsplash.com/photos/qcCHZLdsS80?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Markus Spiske&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/search/photos/axe-split-wood?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploy to multiple environments with git and CircleCI</title>
      <link>https://codewithhugo.com/deploy-to-multiple-environments-with-git-and-circleci/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/deploy-to-multiple-environments-with-git-and-circleci/</guid>
      <description>&lt;p&gt;Easily deploying to multiple environments in a simple manner using GitHub, CircleCI and Heroku.&lt;/p&gt;

&lt;p&gt;Continuous Integration is awesome, but sometimes you need a buffer between auto-deploying things on merge and the production release. To do that with CircleCI requires some git branch-wrangling and a few lines of bash scripting.
We‚Äôll imagine a scenario where a deploy is trivial (ie. we‚Äôll pretend we‚Äôre using Heroku). For more complicated build steps we should still be able to follow similar principles.
This is not a CircleCI 2.0 workflows tutorial, it‚Äôs more of a git-flow/CircleCI hybrid to have 2 (or more) environments being released to and automatically deployed by CircleCI.&lt;/p&gt;

&lt;p&gt;I would like to thanks Chris Fidao, and &lt;a href=&#34;https://twitter.com/fideloper/status/1020330385333530624&#34;&gt;this tweet&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://codewithhugo.com/img/2018-07-30-chris-fidao-tweet-screenshot.jpg&#34; alt=&#34;üî• Git is great, but not for what Linus probably intended. Despite its intentions, git(hub|lab|bucket) is actually used for: 1. backup (and distribution) 2. automation 3. release management 4. a hundred other things ..... xxx. version control https://t.co/GLUYkppSLs &amp;amp;mdash; Chris Fidao (@fideloper) https://twitter.com/fideloper/status/1020330385333530624 20 July 2018&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll go through how to use GitHub + CircleCI for deployment automation and release management.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was sent out on the &lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Code with Hugo newsletter&lt;/a&gt; last Monday.
&lt;a href=&#34;https://buttondown.email/hugo&#34;&gt;Subscribe&lt;/a&gt; to get the latest posts right in your inbox (before anyone else).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-branch-setup&#34;&gt;A branch setup üå≥&lt;/h2&gt;

&lt;p&gt;We‚Äôll want a &lt;code&gt;develop&lt;/code&gt; and a &lt;code&gt;master&lt;/code&gt; branch that get auto-deployed. Our default branch should be develop (ie. all pull requests should get merged into.
Thats as simple as running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ git checkout -b develop
$ git push -u origin develop
&lt;span class=&#34;c1&#34;&gt;# There&amp;#39;s usually already a master branch otherwise:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git checkout -b master
$ git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We‚Äôre using branches because that‚Äôs the only primitive that CircleCI understands. On TravisCI or GoCD you would be able to set up ‚Äúpipelines‚Äù for each environment but CircleCI workflows can‚Äôt be triggered for different environments manually, so it‚Äôs easiest to use git branches.&lt;/p&gt;

&lt;h2 id=&#34;the-workflow&#34;&gt;The workflow üèû&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a feature/task branch&lt;/li&gt;
&lt;li&gt;Complete the task, get the code in a state to be merged&lt;/li&gt;
&lt;li&gt;Open a PR from the feature/task branch to &lt;code&gt;develop&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;CircleCI runs tests/lint whatever else (not covered in this post)&lt;/li&gt;
&lt;li&gt;Automated checks are all green ‚úÖ&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;li&gt;The PR is merged into &lt;code&gt;develop&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;CircleCI runs automated checks again&lt;/li&gt;
&lt;li&gt;CircleCI deploys to development/staging environment if all checks are green&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;To deploy to production, the release has to be manual

&lt;ol&gt;
&lt;li&gt;Merge &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CircleCI runs automated checks again&lt;/li&gt;
&lt;li&gt;CircleCI deploys to production environment if all checks are green&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make this process easier, we‚Äôll have some release scripts to automate step 6 (merging correctly is easy to do wrong) and some CircleCI config to do steps 5a-b and 6b-c.&lt;/p&gt;

&lt;h2 id=&#34;release-scripts&#34;&gt;Release scripts üõ´&lt;/h2&gt;

&lt;p&gt;The following is  &lt;code&gt;release-production.sh&lt;/code&gt;, we can use it to merge changes from develop ‚Üí master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -u
&lt;span class=&#34;nv&#34;&gt;RELEASE_FROM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;develop&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;RELEASE_TO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;CURRENT_BRANCH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;`git branch | grep \* | cut -d &amp;#39; &amp;#39; -f2`&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Checking out to &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_FROM&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; branch and pulling latest&amp;#34;&lt;/span&gt;
git checkout &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_FROM&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; 
git pull
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Checking out to &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_TO&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; branch and pulling latest&amp;#34;&lt;/span&gt;
git checkout &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_TO&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; 
git pull
&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;Are you sure you want to merge &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_FROM&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; into &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_TO&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;? (y/n)&amp;#34;&lt;/span&gt; -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -r
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$REPLY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~ ^&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Yy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    git merge &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RELEASE_FROM&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; --ff-only
    git push
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

git checkout &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CURRENT_BRANCH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here‚Äôs a breakdown of the steps of what it does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save current branch name&lt;/li&gt;
&lt;li&gt;checkout to the branch we are releasing from (&lt;code&gt;develop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;pull latest&lt;/li&gt;
&lt;li&gt;checkout to the branch we are releasing to (&lt;code&gt;master&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;pull latest&lt;/li&gt;
&lt;li&gt;prompt before merge&lt;/li&gt;
&lt;li&gt;merge

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ff-only&lt;/code&gt;, means we run all merges with ‚Äúfast-forward‚Äù which means we won‚Äôt get a merge commit, this means there won‚Äôt be a merge commit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;prompt before release&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;reset to branch we were initially on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logging-in-to-heroku-optional&#34;&gt;Logging in to Heroku (optional) üîë&lt;/h3&gt;

&lt;p&gt;To store secrets we‚Äôll use CircleCI environment variables setting, and set &lt;code&gt;HEROKU_EMAIL&lt;/code&gt; and &lt;code&gt;HEROKU_TOKEN&lt;/code&gt; through the UI (Settings ‚Üí Build Settings ‚Üí Environment Variables).
To get your Heroku token run &lt;code&gt;heroku auth:token&lt;/code&gt;.
To log in to Heroku, use the following in &lt;code&gt;login-heroku.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; ~/.netrc &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    machine api.heroku.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        login $HEROKU_EMAIL
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        password $HEROKU_TOKEN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    machine git.heroku.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        login $HEROKU_EMAIL
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;        password $HEROKU_TOKEN
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Add heroku.com to the list of known hosts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;mkdir ~/.ssh
ssh-keyscan -H heroku.com &amp;gt;&amp;gt; ~/.ssh/known_hosts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;12-ish-factor-app&#34;&gt;12(ish) factor app üèó&lt;/h2&gt;

&lt;p&gt;We want to manage configuration somehow, for all the environments as described by &lt;a href=&#34;https://12factor.net/&#34;&gt;https://12factor.net/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;injecting-config-and-secrets&#34;&gt;Injecting config and secrets üíâ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;setup-env.sh&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch on &lt;code&gt;CIRCLE_BRANCH&lt;/code&gt;, set some variables conditionally (&lt;code&gt;ENVIRONMENT&lt;/code&gt;, &lt;code&gt;HEROKU_APP&lt;/code&gt;, others not (&lt;code&gt;NODE_ENV&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CIRCLE_BRANCH&lt;/span&gt; in
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;develop&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVIRONMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-app&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVIRONMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-other-app&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we had to set some secrets around here, we would do something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CIRCLE_BRANCH&lt;/span&gt; in
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;develop&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MY_SECRET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MY_SECRET_DEV&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-app&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MY_SECRET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MY_SECRET_PRODUCTION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;MY_SECRET_DEV&lt;/code&gt;  and &lt;code&gt;MY_SECRET_PRODUCTION&lt;/code&gt; are set through CircleCI environment variables (Settings ‚Üí Build Settings ‚Üí Environment Variables).&lt;/p&gt;

&lt;h3 id=&#34;run-that-deploy&#34;&gt;Run that deploy üõ¨&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;deploy-heroku.sh&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read setup from &lt;code&gt;setup-env&lt;/code&gt;, add Heroku remote and push current branch to &lt;code&gt;master&lt;/code&gt; on Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -u
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ./setup-env.sh
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pushing branch &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CIRCLE_BRANCH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to app &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
git remote add heroku https://git.heroku.com/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.git
git push heroku &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CIRCLE_BRANCH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;To have some sort of record of what‚Äôs deployed and what‚Äôs not, we want to set the &lt;code&gt;COMPARE_URL&lt;/code&gt; and version number (&lt;code&gt;BUILD_NUM&lt;/code&gt;) on Heroku, that requires the Heroku CLI:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -L /usr/local/bin/heroku &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    wget https://cli-assets.heroku.com/branches/stable/heroku-linux-amd64.tar.gz
    sudo mkdir -p /usr/local/lib /usr/local/bin
    sudo tar -xvzf heroku-linux-amd64.tar.gz -C /usr/local/lib
    sudo ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; infra/scripts/setup-env.sh
heroku config:set &lt;span class=&#34;nv&#34;&gt;BUILD_NUM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CIRCLE_BUILD_NUM&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;COMPARE_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CIRCLE_COMPARE_URL&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -a &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEROKU_APP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All together we end up with the following  &lt;code&gt;.circleci/config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;jobs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;docker&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;circleci/node&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.5&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# replace with the image you need&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;steps&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;checkout&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Log&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;in&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Heroku&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./login-heroku.sh&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Heroku&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;CLI&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;|
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            wget https://cli-assets.heroku.com/branches/stable/heroku-linux-amd64.tar.gz
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            sudo mkdir -p /usr/local/lib /usr/local/bin
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            sudo tar -xvzf heroku-linux-amd64.tar.gz -C /usr/local/lib
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            sudo ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deploy&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;heroku&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;app&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bash&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;infra/deploy-heroku.sh&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Set&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;BUILD_NUM&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;and&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;COMPARE_URL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;on&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Heroku&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;to&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;CIRCLECI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;values&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;|
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            source ./setup-env.sh
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;            heroku config:set BUILD_NUM=${CIRCLE_BUILD_NUM} COMPARE_URL=${CIRCLE_COMPARE_URL} -a ${HEROKU_APP}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;workflows&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;ci&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;jobs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;branches&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;only&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;develop&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You should probably be running&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# some checks before you deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# requires:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#  - test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#  - lint&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This isn‚Äôt an exhaustive description of how to set up your CI, but it‚Äôs a start.&lt;/p&gt;

&lt;p&gt;Feel free to drop me a line at &lt;a href=&#34;hi@codewithhugo.com&#34;&gt;hi@codewithhugo.com&lt;/a&gt;, or Twitter &lt;a href=&#34;https://twitter.com/hugo__df&#34;&gt;@hugo__df&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@fairfilter?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Oliver Roos&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Oliver Roos&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Change the date of a git commit</title>
      <link>https://codewithhugo.com/change-the-date-of-a-git-commit/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/change-the-date-of-a-git-commit/</guid>
      <description>&lt;p&gt;One of the greatest and worst things with git is that you can rewrite the history. Here‚Äôs a sneaky way of abusing that, I can‚Äôt think of a legitimate reason to do this.&lt;/p&gt;

&lt;p&gt;As with anything, thanks StackOverflow for all the options I can pick from üëç.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;set-the-date-of-the-last-commit-to-the-current-date&#34;&gt;Set the date of the last commit to the current date&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GIT_COMMITTER_DATE=&amp;quot;$(date)&amp;quot; git commit --amend --no-edit --date &amp;quot;$(date)&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;set-the-date-of-the-last-commit-to-an-arbitrary-date&#34;&gt;Set the date of the last commit to an arbitrary date&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GIT_COMMITTER_DATE=&amp;quot;Mon  20 Aug 2018 20:19:19 BST&amp;quot; git commit --amend --no-edit --date &amp;quot;Mon  20 Aug 2018 20:19:19 BST&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;set-the-date-of-an-arbitrary-commit-to-an-arbitrary-or-current-date&#34;&gt;Set the date of an arbitrary commit to an arbitrary or current date&lt;/h2&gt;

&lt;p&gt;Rebase to before said commit and stop for amendment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rebase &amp;lt;commit-hash&amp;gt;^ -i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;e&lt;/code&gt; (edit) on the line with that commit (the first one)&lt;/li&gt;
&lt;li&gt;quit the editor (ESC followed by &lt;code&gt;:wq&lt;/code&gt; in VIM)&lt;/li&gt;
&lt;li&gt;Either:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GIT_COMMITTER_DATE=&amp;quot;$(date)&amp;quot; git commit --amend --no-edit --date &amp;quot;$(date)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_COMMITTER_DATE=&amp;quot;Mon  20 Aug 2018 20:19:19 BST&amp;quot; git commit --amend --no-edit --date &amp;quot;Mon  20 Aug 2018 20:19:19 BST&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See here for more information around rebasing and editing in git: &lt;a href=&#34;https://codewithhugo.com/split-an-existing-git-commit/&#34;&gt;Split an existing git commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@seanmungurdp?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Sean Mungur&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Sean Mungur&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Progress and roadblocks: a journey into open-source</title>
      <link>https://codewithhugo.com/progress-and-roadblocks-a-journey-into-open-source/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/progress-and-roadblocks-a-journey-into-open-source/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Enhancing generators for ES6 in the Sequelize CLI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the story of my discovery of ES6-class style model definitions with Sequelize (see &lt;a href=&#34;https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/&#34;&gt;Using ES6 classes for Sequelize 4 models&lt;/a&gt;).
The realisation that the current Sequelize CLI model generator didn&amp;rsquo;t support it (as is expected since it&amp;rsquo;s not the most common way of doing it).
Finally, the impetus to just implement it myself.&lt;/p&gt;

&lt;p&gt;In other words, I started using a style of Sequelize models that the Sequelize CLI didn&amp;rsquo;t support. I didn&amp;rsquo;t get an answer on a &amp;ldquo;feature request&amp;rdquo; issue, so I just forked it, implemented it and published it.&lt;/p&gt;

&lt;p&gt;The Free Open Source Software movement has its ups and downs, its hype and abandoned projects.
One of the great aspects of it is that you can always (depending on the license) just fork something and publish it üôÇ.&lt;/p&gt;

&lt;p&gt;Some links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/HugoDF/sequelize-cli&#34;&gt;sequelize-cli fork repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@hugodf/sequelize-cli&#34;&gt;fork published on npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Live-tweet storms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/hugo__df/status/1057294226755592192&#34;&gt;Day 1 (struggles)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/hugo__df/status/1057671284920848385&#34;&gt;Day 2 (fixes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/hugo__df/status/1057986197165879298&#34;&gt;Day 3 (first publish)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/hugo__df/status/1058284191673188354&#34;&gt;Day 4 (finishing up)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Table of contents:
&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-a-github-fork-repository&#34;&gt;Dealing with a GitHub fork repository üç¥&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Fork using the GitHub UI&lt;/li&gt;
&lt;li&gt;Clone &lt;strong&gt;your fork&lt;/strong&gt; &lt;code&gt;git clone git@github.com:USERNAME/REPONAME.git&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;eg. &lt;code&gt;git clone git@github.com:HugoDF/sequelize-cli.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create upstream remote

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add upstream git remote add upstream https://github.com/sequelize/cli&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;(To sync with upstream) fetch upstream remote and merge it into local branch (from &lt;a href=&#34;https://help.github.com/articles/syncing-a-fork/&#34;&gt;GitHub Help Syncing a Fork&lt;/a&gt;)

&lt;ol&gt;
&lt;li&gt;Get latest from upstream &lt;code&gt;git fetch upstream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge changes &lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Send upstream changes to fork  &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;following-setup-instructions&#34;&gt;Following setup instructions üìê&lt;/h2&gt;

&lt;p&gt;Getting a project set up can be daunting, luckily Sequelize CLI has some steps in &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;, they&amp;rsquo;re the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Didn‚Äôt work on Node 10, something to do with node-gyp and SQLite&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;takes 10-15 minutes&lt;/li&gt;
&lt;li&gt;failed on latest &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;my-goals&#34;&gt;My goals üõí&lt;/h2&gt;

&lt;p&gt;I wanted to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;sequelize model:create&lt;/code&gt; to support a second template, which uses an ES6 class model üëç when passed a &lt;code&gt;--class&lt;/code&gt; flag, the tasks are as follows

&lt;ol&gt;
&lt;li&gt;Add support for a &lt;code&gt;--class&lt;/code&gt; flag, somewhere in &lt;a href=&#34;https://github.com/HugoDF/sequelize-cli/blob/master/src/commands/model_generate.js#L10-L24&#34;&gt;model_generate.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check for &lt;code&gt;args.class&lt;/code&gt; in &lt;a href=&#34;https://github.com/HugoDF/sequelize-cli/blob/master/src/helpers/model-helper.js#L45-L51&#34;&gt;model_helper.js&lt;/a&gt; &lt;code&gt;generateFileContent&lt;/code&gt;, and switch templates depending on that&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;class-model.js&lt;/code&gt; file which is a template similar to &lt;a href=&#34;https://github.com/HugoDF/sequelize-cli/blob/master/src/assets/models/model.js&#34;&gt;src/assets/models/model.js&lt;/a&gt; but uses ES6 &lt;code&gt;class&lt;/code&gt; syntax for the Sequelize model&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;class-model.js&lt;/code&gt; instead of &lt;code&gt;model.js&lt;/code&gt; in &lt;code&gt;model_helper#generateFileContent&lt;/code&gt; when &lt;code&gt;args.class&lt;/code&gt; is set (ie. &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Update the migration generator (these are totally arbitrary choices but things I‚Äôve found wanting to do in Sequelize projects):

&lt;ol&gt;
&lt;li&gt;use object shorthand notation for functions instead of arrow functions&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Ended up not doing this, because it&amp;rsquo;s trivial and nitpicky)&lt;/em&gt; use &lt;code&gt;(sequelize, DataTypes) -&amp;gt; Promise&lt;/code&gt; function signature, ie. rename &lt;code&gt;queryInterface&lt;/code&gt; and &lt;code&gt;Sequelize&lt;/code&gt; to &lt;code&gt;sequelize&lt;/code&gt; and &lt;code&gt;DataTypes&lt;/code&gt; respectively&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;(Won‚Äôt do)&lt;/em&gt;&lt;/strong&gt; Update &lt;code&gt;model/index.js&lt;/code&gt; to a form that is more explicit and more in line with what I would use in production

&lt;ul&gt;
&lt;li&gt;Why?
This isn‚Äôt something that is compatible with current behaviour of the template, you would lose auto-loading of all models in the &lt;code&gt;models&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-tests-to-pass&#34;&gt;Getting tests to pass üö´&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Failing locally‚Ä¶&lt;/li&gt;
&lt;li&gt;Was working for &lt;a href=&#34;https://github.com/sequelize/cli&#34;&gt;https://github.com/sequelize/cli&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Why?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2.1/ Day 2 of trying to hack on Sequelize CLI&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got green tests&amp;hellip; it turns out &lt;code&gt;master&lt;/code&gt; is a fake ‚úÖ passing build.&lt;br /&gt;
It loads latest &lt;code&gt;sequelize-cli&lt;/code&gt; from npm, soooo isn&amp;rsquo;t testing the code in master.&lt;/p&gt;

&lt;p&gt;Hard reset to latest released npm version fixed the test üëç&lt;/p&gt;

&lt;p&gt;‚Äî Hugo Di Francesco (@hugo__df) &lt;a href=&#34;https://twitter.com/hugo__df/status/1057671284920848385?ref_src=twsrc%5Etfw&#34;&gt;31 October 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sequelize CLI Continuous Integration isn&amp;rsquo;t set up how you expect it to be set up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What you expect: checkout the commit&amp;rsquo;s code and test it&lt;/li&gt;
&lt;li&gt;What it does: fetch &lt;code&gt;sequelize-cli&lt;/code&gt; from npm, and test that&amp;hellip; so it&amp;rsquo;s testing the latest published release, not the latest code in the repo.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tests still take a while ‚è≥&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they&amp;rsquo;re mostly integration tests: writing files, writing to the DB and having to setup/teardown every so often&lt;/li&gt;
&lt;li&gt;on my machine a bunch of tests run in 2-3 seconds each and the total time is about 10-15 minutes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;releasing-the-updates&#34;&gt;Releasing the updates üöÄ&lt;/h2&gt;

&lt;h3 id=&#34;trying-to-contribute-back-upstream&#34;&gt;Trying to contribute back upstream&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;https://github.com/sequelize/cli/issues/678&#34;&gt;GitHub issue created on the 1st of August 2018&lt;/a&gt; seems to have been lost (not even a ‚Äúthis isn‚Äôt something we want to do‚Äù).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the nicest experience but it&amp;rsquo;s totally fine by me, OSS maintainers don&amp;rsquo;t owe us anything after all.&lt;/p&gt;

&lt;p&gt;This might be a niche use-case, most people seem to be happy to write models in the &lt;code&gt;module.exports = () =&amp;gt; { /* do some stuff in the closure */ return };&lt;/code&gt; fashion,
although looking at the number of people who read &lt;a href=&#34;https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/&#34;&gt;‚ÄúUsing ES6 classes for Sequelize 4 models‚Äù&lt;/a&gt;,
it‚Äôs a valid way to write an application using Sequelize:&lt;/p&gt;

&lt;iframe width=&#34;600&#34; height=&#34;338&#34; src=&#34;https://datastudio.google.com/embed/reporting/1oQQZK-AbLF8qZhv9FWJwhVfZiTUMjtok/page/WdLb&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;noscript&gt;
![](https://d2mxuefqeaa7sj.cloudfront.net/s_3F14BC7EA71B60938252453DA3775006F6FE61D96309C1403D86743C7DA41F76_1541000231558_Screen+Shot+2018-10-30+at+15.36.36.png)
&lt;/noscript&gt;

&lt;p&gt;I went ahead and created a PR but I don‚Äôt expect it to get merged:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ES6 class PR on &lt;a href=&#34;https://github.com/sequelize/cli/pull/709&#34;&gt;sequelize/cli repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publishing-a-fork-as-an-npm-scoped-module&#34;&gt;Publishing a fork as an npm scoped module&lt;/h3&gt;

&lt;p&gt;I always thought this is more a niche/variation type of thing, so publishing it as a fork makes sense&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;package.json&lt;/code&gt; to have, &lt;code&gt;publishConfig&lt;/code&gt; is very important if you‚Äôre publishing a scoped module&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@hugodf/sequelize-cli&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;publishConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;access&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;np&lt;/code&gt; üôÇ:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npx np&lt;/code&gt; and go through the dialog&lt;/li&gt;
&lt;li&gt;Since the tests take 10-15 minutes to run, I‚Äôve found using the &lt;code&gt;--yolo&lt;/code&gt; option useful&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_3F14BC7EA71B60938252453DA3775006F6FE61D96309C1403D86743C7DA41F76_1541151247857_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lessons-about-the-open-source-movement&#34;&gt;Lessons about the Open Source Movement üìñ&lt;/h2&gt;

&lt;h3 id=&#34;people-are-paid-to-make-mistakes-people-who-work-for-free-will-also-make-similar-mistakes&#34;&gt;People are paid to make mistakes, people who work for free will also make (similar) mistakes&lt;/h3&gt;

&lt;p&gt;Just like at the day job, it&amp;rsquo;s important to have empathy for &amp;ldquo;interesting things&amp;rdquo; going on in the code eg. &lt;a href=&#34;#getting-tests-to-pass&#34;&gt;the tests running against something other than the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If anything maintainers have created this project for free, in their spare time so expect &lt;em&gt;more&lt;/em&gt; &amp;ldquo;interesting things&amp;rdquo; in the codebase.&lt;/p&gt;

&lt;p&gt;Technical debt is a sign that the open source project has reached some level of maturity.&lt;/p&gt;

&lt;p&gt;Remember that your situation is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aware of the project&amp;rsquo;s existence&lt;/li&gt;
&lt;li&gt;Using the project&lt;/li&gt;
&lt;li&gt;Finding a use-cases where the project doesn&amp;rsquo;t quite fit &lt;em&gt;your&lt;/em&gt; needs&lt;/li&gt;
&lt;li&gt;That use-case might not be something the project even wants to solve&lt;/li&gt;
&lt;li&gt;Attempting to contribute back to the project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You&amp;rsquo;re in a very specific situation where the project has reached some level of critical mass/awareness/scale.
To get here, just like at a startup attempting to scale, the maintainers have had to move relatively fast and fly by the seat of their pants, maybe put some &amp;ldquo;hacks&amp;rdquo; in some places.&lt;/p&gt;

&lt;h3 id=&#34;no-one-owes-you-anything&#34;&gt;No one owes you &lt;em&gt;anything&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As I mentioned, I opened both an issue and a PR and I don&amp;rsquo;t think either one of them is going to get a response.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why I just went ahead and published the fork as a module (scoped modules is awesome for this kind of use-case üëç npm team).&lt;/p&gt;

&lt;h3 id=&#34;do-what-you-can&#34;&gt;Do what you can&lt;/h3&gt;

&lt;p&gt;Every little helps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mentioning something that stumped you during setup (eg. master being a fake green ‚úÖ build)&lt;/li&gt;
&lt;li&gt;Documentation updates&lt;/li&gt;
&lt;li&gt;Opening random PRs with super-opinionated new feature üôÑ&lt;/li&gt;
&lt;li&gt;Write blog posts documenting interesting usage of a library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone is just trying to help.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@docrowdee?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Ruediger Theiselmann&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Ruediger Theiselmann&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A simple JavaScript/Node coding setup on Mac OS X</title>
      <link>https://codewithhugo.com/a-simple-javascript/node-coding-setup-on-mac-os-x/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/a-simple-javascript/node-coding-setup-on-mac-os-x/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s how I get productive for JavaScript/Node on Mac OS.&lt;/p&gt;

&lt;p&gt;It includes iTerm2, zsh, Node, Visual Studio Code and some git commands.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;terminal&#34;&gt;Terminal&lt;/h1&gt;

&lt;h2 id=&#34;setup-iterm2&#34;&gt;Setup iTerm2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;change-edit-mode-to-natural-text&#34;&gt;Change edit mode to natural text&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTerm Preferences ‚Üí Profiles ‚Üí select your profile ‚Üí Keys tab ‚Üí Load Preset&amp;hellip; ‚Üí Natural Text Editing (See &lt;a href=&#34;https://apple.stackexchange.com/a/218639&#34;&gt;this StackOverflow answer&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542554401407_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;new-session-should-start-where-previous-left-off&#34;&gt;New session should start where previous left off&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTerm Preferences ‚Üí Profiles ‚Üí select your profile ‚Üí General tab ‚Üí Working Directory section ‚Üí Reuse previous session‚Äôs directory option
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542554259914_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;quit-on-tab-close&#34;&gt;Quit on tab close&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTerm Preferences ‚Üí General, ‚ÄúClosing‚Äù ‚Üí ‚ÄúQuit when all windows are closed‚Äù
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542554318639_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;increase-font-size&#34;&gt;Increase font size&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTerm Preferences ‚Üí Profiles ‚Üí select your profile ‚Üí Text tab ‚Üí Font section ‚Üí Change font ‚Üí Update font in the popup&lt;/li&gt;
&lt;li&gt;Fan of 16pt Monaco (12, 14 is just too small)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542554456878_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;enable-infinite-history&#34;&gt;Enable infinite history&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTerm Preferences ‚Üí Profiles ‚Üí select your profile ‚Üí Terminal tab ‚Üí Unlimited scrollback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ATMGb9k.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;shell-setup&#34;&gt;Shell setup&lt;/h2&gt;

&lt;h3 id=&#34;zsh&#34;&gt;zsh&lt;/h3&gt;

&lt;p&gt;With &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; manager. Sets you up with auto-completion.&lt;/p&gt;

&lt;h3 id=&#34;snazzy-colour-theme&#34;&gt;snazzy colour theme&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&#34;https://github.com/samtgarson/iterm-snazzy&#34;&gt;iterm-snazzy&lt;/a&gt;, which is a case of downloading the &lt;code&gt;.itermcolors&lt;/code&gt; file and choosing the theme from (iTerm Preferences ‚Üí Profile &amp;gt; Colors &amp;gt; Color Presets&amp;hellip;).&lt;/p&gt;

&lt;h3 id=&#34;pure-prompt&#34;&gt;Pure prompt&lt;/h3&gt;

&lt;p&gt;It‚Äôs simple, clean but gives you enough information to be productive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(see &lt;a href=&#34;#setup-and-configuration&#34;&gt;Setup and configuration&lt;/a&gt; for how to get Node/npm up and running)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install using npm:  &lt;code&gt;npm install --global pure-prompt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initialise by adding the following to your &lt;code&gt;.zshrc&lt;/code&gt;:
autoload -U promptinit; promptinit
prompt pure&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;browsers-and-testing&#34;&gt;Browsers and testing&lt;/h1&gt;

&lt;p&gt;As a developer it‚Äôs always good to have a few browsers and tools handy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Google Chrome&lt;/a&gt;: still a goto due to its solid and extensive dev tools. Usually I install the React or Vue dev tools.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.getpostman.com/apps&#34;&gt;Postman for Mac&lt;/a&gt;: to manually test APIs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/firefox/new/&#34;&gt;Firefox&lt;/a&gt;: number 2 browser&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brave.com/&#34;&gt;Brave&lt;/a&gt;: auto-blocks ads and tracking, sort of the ‚Äúplay‚Äù browser, its dev tools are a buggier/less ergonomic version of Chrome dev tools (this is because Brave uses Chromium under the hood)&lt;/li&gt;
&lt;li&gt;Safari - installed by default on Mac OSX, it‚Äôs a buggy browser, good to test using it since it surfaces weird SVG and cookies security policy quirks. Since it‚Äôs the default it‚Äôs also widely used by non-technical people.

&lt;ul&gt;
&lt;li&gt;Enable the dev tools: Safari ‚Üí Preferences ‚Üí Advanced ‚Üí Show develop menu in menu bar.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;editor&#34;&gt;Editor&lt;/h1&gt;

&lt;p&gt;I use &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;, it strikes the right balance between usable out of the box and customisable. The way I see it editors like vim or Atom need a bit of config before being productive, and others like Sublime or IDEs (WebStorm) don‚Äôt have the same plugin ecosystem.&lt;/p&gt;

&lt;h2 id=&#34;install-vscode-command-line-tools&#34;&gt;Install VSCode command line tools&lt;/h2&gt;

&lt;p&gt;Open the dialog using CMD + P.&lt;/p&gt;

&lt;p&gt;Use: &lt;code&gt;Shell Command: Install &#39;code&#39; command in PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542556492194_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The VSCode command line tool usage examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code .&lt;/code&gt; : open &lt;code&gt;.&lt;/code&gt; directory in VSCode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code -r .&lt;/code&gt; : replace directory opened in VSCode with the current directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code -a .&lt;/code&gt; : add current directory to VSCode, ie. initialises a workspace&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;must-have-extensions&#34;&gt;Must-have extensions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atom keymap: I‚Äôm not a fan of the default keybindings, this uses Atom-style ones, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings&#34;&gt;get it from the Visual Studio Marketplace&lt;/a&gt; or &lt;code&gt;ext install atom-keybindings&lt;/code&gt; from &lt;code&gt;CMD + P&lt;/code&gt; menu&lt;/li&gt;
&lt;li&gt;EditorConfig for VS Code: ‚ÄúEditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs.‚Äù (see &lt;a href=&#34;https://editorconfig.org/&#34;&gt;editorconfig.org&lt;/a&gt;), ie. helps you deal with tab size, trimming spaces etc. across code editors, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34;&gt;get it here from the Visual Studio Marketplace&lt;/a&gt; or &lt;code&gt;ext install EditorConfig&lt;/code&gt; from &lt;code&gt;CMD + P&lt;/code&gt; menu&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nice-to-have-extensions&#34;&gt;Nice to have extensions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ESLint: ‚ÄúIntegrates ESLint JavaScript into VS Code.‚Äù, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;get it from the Visual Studio Marketplace&lt;/a&gt; or &lt;code&gt;ext install vscode-eslint&lt;/code&gt; from &lt;code&gt;CMD + P&lt;/code&gt; menu&lt;/li&gt;
&lt;li&gt;npm Intellisense: ‚Äúautocomplete npm modules in import statements‚Äù, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense&#34;&gt;get it from the Visual Studio Marketplace&lt;/a&gt; or &lt;code&gt;ext install npm-intellisense&lt;/code&gt; from &lt;code&gt;CMD + P&lt;/code&gt; menu&lt;/li&gt;
&lt;li&gt;Snazzy theme: same colour theme (snazzy) as I‚Äôve got setup for the terminal for VSCode, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alexanderbast.vscode-snazzy&#34;&gt;get it from the Visual Studio Marketplace&lt;/a&gt; or &lt;code&gt;ext install snazzy theme&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Import Cost: ‚ÄúDisplay import/require package size in the editor‚Äù, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&#34;&gt;get it from the Visual Studio Marketplace&lt;/a&gt;, or &lt;code&gt;ext install import-cost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;productivity&#34;&gt;Productivity&lt;/h1&gt;

&lt;p&gt;Not many productivity apps, just &lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt;, which I use as a better Spotlight Search and &lt;a href=&#34;https://clipy-app.com/&#34;&gt;Clipy&lt;/a&gt; which is a clipboard manager.&lt;/p&gt;

&lt;h2 id=&#34;clipy&#34;&gt;Clipy&lt;/h2&gt;

&lt;p&gt;Bump up the number of ‚Äúinline items‚Äù (Clipy ‚Üí Preferences ‚Üí Menu ‚Üí Number of items place inline).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_4D85104EB4612E36D39F1EDC98FBA3CCC5F99A3320C73070E613DFAB4FC5809A_1542557479751_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Set your screenshots to save to clipboard + enable the option to paste as plain text (Clipy ‚Üí Preferences ‚Üí Beta ‚Üí Paste as PlainText + Save screenshots in history).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YEtHo8a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;tooling&#34;&gt;Tooling&lt;/h1&gt;

&lt;p&gt;Update Xcode using &lt;code&gt;xcode-select&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; for package managements (think apt or pkg for Mac):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/usr/bin/ruby -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; either from source, using the Mac installer or using Homebrew:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install node&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;code&gt;n&lt;/code&gt; ‚Äì Interactively Manage Your Node.js Versions using npm (now that we have Node installed):
&lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;global n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Switch to latest Node version using &lt;code&gt;n&lt;/code&gt;:
&lt;code&gt;sudo n latest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install jq (format and deal with JSON nicely in the terminal) and watch (run a command repeatedly) using Homebrew&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install jq watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add a few git extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/paulirish/git-open&#34;&gt;git-open&lt;/a&gt;: ‚ÄúType &lt;code&gt;git open&lt;/code&gt; to open the GitHub page or website for a repository in your browser.‚Äù using &lt;code&gt;npm install --global git-open&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kamranahmedse/git-standup&#34;&gt;git-standup&lt;/a&gt;: ‚ÄúRecall what you did on the last working day.‚Äù using &lt;code&gt;git standup&lt;/code&gt;, there are multiple install options (see &lt;a href=&#34;https://github.com/kamranahmedse/git-standup#install&#34;&gt;git-standup#install&lt;/a&gt;), I usually go with: &lt;code&gt;brew install git-standup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/euwpig/a-better-git-log&#34;&gt;git-lg&lt;/a&gt;: simpler/prettier &lt;code&gt;git log&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git config --global alias.lg &lt;span class=&#34;s2&#34;&gt;&amp;#34;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;setup-and-configuration&#34;&gt;Setup and configuration&lt;/h1&gt;

&lt;p&gt;Add the following minimal &lt;code&gt;.vimrc&lt;/code&gt;, which enables syntax highlighting, has basic tab/tabsize configuration and enables line numbers display:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tabstop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shiftwidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expandtab&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set up SSH keys and add to VCS hosting, &lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&#34;&gt;see this GitHub help article&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a new key: &lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;*your_email@example.com*&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy your public key to clipboard so you can paste it wherever your hosted Version Control system asks you to: &lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put percentage on power level, right-click the battery indicator and select ‚ÄúShow Percentage‚Äù.&lt;/p&gt;

&lt;h1 id=&#34;misc-and-extras&#34;&gt;Misc and extras&lt;/h1&gt;

&lt;p&gt;‚ù§Ô∏è Spotify&lt;/p&gt;

&lt;h2 id=&#34;optional-docker-virtualbox&#34;&gt;(Optional) Docker, VirtualBox&lt;/h2&gt;

&lt;p&gt;Docker is a containerisation technology, think VMs but smaller. I recommend &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker for Mac&lt;/a&gt;.
VirtualBox allows you to run Virtual Machines on Mac, install it at &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;VirtualBox downloads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@oskaryil?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Oskar Yildiz&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Oskar Yildiz&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fix git ‚Äútip of your current branch is behind its remote counterpart‚Äù - 4 real-world solutions</title>
      <link>https://codewithhugo.com/fix-git-failed-to-push-updates-were-rejected/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/fix-git-failed-to-push-updates-were-rejected/</guid>
      <description>&lt;p&gt;When working with &lt;code&gt;git&lt;/code&gt; a selection of GitLab, GitHub, BitBucket and rebase-trigger-happy colleagues/collaborators, it‚Äôs a rite of passage to see a message like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Pushing to git@github.com:some-project/some-repo.git
To git@github.com:some-project/some-repo.git
  ! &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;rejected&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;        master -&amp;gt; master &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;non-fast-forward&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class=&#34;s1&#34;&gt;&amp;#39;git@github.com:some-project/some-repo.git&amp;#39;&lt;/span&gt;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. &lt;span class=&#34;s1&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
hint: before pushing again.
hint: See the &lt;span class=&#34;s1&#34;&gt;&amp;#39;Note about fast-forwards&amp;#39;&lt;/span&gt; in &lt;span class=&#34;s1&#34;&gt;&amp;#39;git push --help&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; details.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-causes-tip-of-your-current-branch-is-behind&#34;&gt;What causes ‚Äùtip of your current branch is behind‚Äù?&lt;/h2&gt;

&lt;p&gt;Git works with the concept of local and remote branches. A local branch is a branch that exists in your local version of the git repository. A remote branch is one that exists on the remote location (most repositories usually have a remote called &lt;code&gt;origin&lt;/code&gt;). A remote equates roughly to a place where you git repository is hosted (eg. a GitHub/GitLab/BitBucket/self-hosted Git server repository instance).&lt;/p&gt;

&lt;p&gt;Remotes are useful to share your work or collaborate on a branch.&lt;/p&gt;

&lt;p&gt;‚Äúthe tip of your current branch is behind its remote counterpart‚Äù means that there have been changes on the remote branch that you don‚Äôt have locally.&lt;/p&gt;

&lt;p&gt;There tend to be 2 types of changes to the remote branch: someone added commits or someone modified the history of the branch (usually some sort of rebase).&lt;/p&gt;

&lt;p&gt;These 2 cases should be dealt with differently.&lt;/p&gt;

&lt;h2 id=&#34;how-can-you-get-your-local-branch-back-to-a-state-that-s-pushable&#34;&gt;How can you get your local branch back to a state that&amp;rsquo;s pushable?&lt;/h2&gt;

&lt;p&gt;We‚Äôre now going to explore how to achieve a state in the local branch where the remote won‚Äôt reject the push.&lt;/p&gt;

&lt;h3 id=&#34;1-no-rebase-s-merge-the-remote-branch-into-local&#34;&gt;1. No rebase(s): merge the remote branch into local&lt;/h3&gt;

&lt;p&gt;In the message we can see:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Updates were rejected because the tip of your current branch is behind its remote counterpart. Merge the remote changes (e.g. &amp;lsquo;git pull&amp;rsquo;) before pushing again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So is it as simple as doing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git pull&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And solving any conflicts that arise.&lt;/p&gt;

&lt;p&gt;We shouldn‚Äôt do this if someone has rebased on the remote. The history is different and a merge could have a nasty effect on the history. There will be a weird history with equivalent commits in 2 places plus a merge commit.&lt;/p&gt;

&lt;p&gt;Read on for solutions to the ‚Äúremote has been rebased‚Äù case.&lt;/p&gt;

&lt;h3 id=&#34;2-remote-rebase-no-local-commits-force-git-to-overwrite-files-on-pull&#34;&gt;2. Remote rebase + no local commits: force git to overwrite files on pull&lt;/h3&gt;

&lt;p&gt;If you don‚Äôt have any changes that aren‚Äôt on the remote you can just do:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this is a destructive action, it overwrites all the changes in your local branch with the changes from the remote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset --hard origin/branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is of course very seldom the case but offers a path to the two following solutions.&lt;/p&gt;

&lt;p&gt;Solutions 3. and 4. save the local changes somewhere else (the git stash or another branch). They reset the local branch from the origin using the above command. Finally they re-apply any local changes and send them up.&lt;/p&gt;

&lt;h3 id=&#34;3-remote-rebase-local-commits-soft-git-reset-stash-hard-pull-pop-stash-commit&#34;&gt;3. Remote rebase + local commits: soft git reset, stash, ‚Äúhard pull‚Äù, pop stash, commit&lt;/h3&gt;

&lt;p&gt;Say you‚Äôve got local changes (maybe just a few commits).&lt;/p&gt;

&lt;p&gt;A simple way to use the knowledge from 2. is to do a ‚Äúsoft reset‚Äù.&lt;/p&gt;

&lt;h4 id=&#34;options-to-soft-reset&#34;&gt;Options to ‚Äúsoft reset‚Äù&lt;/h4&gt;

&lt;p&gt;Option 1, say the first commit you‚Äôve added has sha &lt;code&gt;&amp;lt;first-commit-sha&amp;gt;&lt;/code&gt; use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the &lt;code&gt;^&lt;/code&gt; which means the commit preceding &lt;code&gt;&amp;lt;first-commit-sha&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset &amp;lt;first-commit-sha&amp;gt;^ .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Option 2, if you know the number of commits you‚Äôve added, you can also use the following, replace &lt;code&gt;3&lt;/code&gt; with the number of commits you want to ‚Äúundo‚Äù:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git reset HEAD~3 .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now be able to run &lt;code&gt;git status&lt;/code&gt; and see un-staged (ie. ‚Äúmodified‚Äù) file changes from the local commits we‚Äôve just ‚Äúundone‚Äù.&lt;/p&gt;

&lt;h4 id=&#34;save-your-changes-to-the-stash&#34;&gt;Save your changes to the stash&lt;/h4&gt;

&lt;p&gt;Run &lt;code&gt;git stash&lt;/code&gt; to save them to the stash (for more information &lt;a href=&#34;https://git-scm.com/docs/git-stash&#34;&gt;see git docs for stash&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;git status&lt;/code&gt; you‚Äôll see the un-staged (‚Äúmodified‚Äù) files aren‚Äôt there any more.&lt;/p&gt;

&lt;h4 id=&#34;run-the-hard-pull-as-seen-in-the-previous-section&#34;&gt;Run the hard pull as seen in the previous section&lt;/h4&gt;

&lt;p&gt;Run &lt;code&gt;git reset --hard origin/branch-name&lt;/code&gt; as seen in 2.&lt;/p&gt;

&lt;h4 id=&#34;un-stash-and-re-commit-your-changes&#34;&gt;Un-stash and re-commit your changes&lt;/h4&gt;

&lt;p&gt;To restore the stashed changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git stash pop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now use &lt;code&gt;git add&lt;/code&gt; (hopefully with the &lt;code&gt;-p&lt;/code&gt; option, eg. &lt;code&gt;git add -p .&lt;/code&gt;) followed by &lt;code&gt;git commit&lt;/code&gt; to add your local changes to a branch that the remote won‚Äôt reject on push.&lt;/p&gt;

&lt;p&gt;Once you‚Äôve added your changes, &lt;code&gt;git push&lt;/code&gt; shouldn‚Äôt get rejected.&lt;/p&gt;

&lt;h3 id=&#34;4-remote-rebase-local-commits-2-checkout-to-a-new-temp-branch-hard-pull-the-original-branch-cherry-pick-from-temp-onto-branch&#34;&gt;4. Remote rebase + local commits 2: checkout to a new temp branch, ‚Äúhard pull‚Äù the original branch, cherry-pick from temp onto branch&lt;/h3&gt;

&lt;p&gt;That alternative to using stash is to branch off of the local branch, and re-apply the commits of a ‚Äúhard pull‚Äù-ed version of the branch.&lt;/p&gt;

&lt;h4 id=&#34;create-a-new-temp-branch&#34;&gt;Create a new temp branch&lt;/h4&gt;

&lt;p&gt;To start with we‚Äôll create a new temporary local branch. Assuming we started on branch &lt;code&gt;branch-name&lt;/code&gt; branch (if not, run &lt;code&gt;git checkout branch-name&lt;/code&gt;) we can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout -b temp-branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a new branch &lt;code&gt;temp-branch-name&lt;/code&gt; which is a copy of our changes but in a new branch&lt;/p&gt;

&lt;h4 id=&#34;go-back-to-the-branch-and-hard-pull&#34;&gt;Go back to the branch and ‚Äúhard pull‚Äù&lt;/h4&gt;

&lt;p&gt;We‚Äôll now go back to branch &lt;code&gt;branch-name&lt;/code&gt; and overwrite our local version with the remote one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Followed by &lt;code&gt;git reset --hard origin/branch-name&lt;/code&gt; as seen in 2.&lt;/p&gt;

&lt;h4 id=&#34;cherry-pick-the-commits-from-temp-branch-onto-the-local-branch&#34;&gt;Cherry-pick the commits from temp branch onto the local branch&lt;/h4&gt;

&lt;p&gt;We‚Äôll now want to switch back to &lt;code&gt;temp-branch-name&lt;/code&gt; and get the SHAs of the commits we want to apply:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout temp-branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Followed by&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see which commits we want to apply (to exit &lt;code&gt;git log&lt;/code&gt; you can use &lt;code&gt;q&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&#34;cherry-pick-each-commit-individually&#34;&gt;Cherry-pick each commit individually&lt;/h4&gt;

&lt;p&gt;Say we want to apply commits &lt;code&gt;&amp;lt;commit-sha-1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;commit-sha-2&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôll switch to the branch that has been reset to the remote version using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We‚Äôll then use cherry-pick (&lt;a href=&#34;https://git-scm.com/docs/git-cherry-pick&#34;&gt;see cherry-pick git docs&lt;/a&gt;) to apply those commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git cherry-pick &amp;lt;commit-sha1&amp;gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git cherry-pick &amp;lt;commit-sha2&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;cherry-pick-a-range-of-commits&#34;&gt;Cherry-pick a range of commits&lt;/h4&gt;

&lt;p&gt;If you‚Äôve got a bunch of commits and they‚Äôre sequential, you can use the following (for git 1.7.2+)&lt;/p&gt;

&lt;p&gt;We‚Äôll make sure to be on the branch that has been reset to the remote version using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout branch-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;For git version 1.7.2+, credit to &lt;a href=&#34;https://fmarier.org/&#34;&gt;&lt;strong&gt;Fran√ßois Marier&lt;/strong&gt;&lt;/a&gt; in ‚Äú&lt;a href=&#34;https://feeding.cloud.geek.nz/posts/cherry-picking-range-of-git-commits/&#34;&gt;Cherry-picking a range of git commits&lt;/a&gt;‚Äù - &lt;a href=&#34;https://feeding.cloud.geek.nz/&#34;&gt;Feeding the Cloud&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git cherry-pick &amp;lt;first-commit-sha&amp;gt;^..&amp;lt;last-commit-sha&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now be able to &lt;code&gt;git push&lt;/code&gt; the local branch to the remote without getting rejected.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@aloragriffiths?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Alora Griffiths&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Alora Griffiths&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
