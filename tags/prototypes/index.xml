<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prototypes on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/prototypes/</link>
    <description>Recent content in Prototypes on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 08 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://codewithhugo.com/tags/prototypes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ObservableHQ notebooks for JavaScript demos and prototypes</title>
      <link>https://codewithhugo.com/observablehq-notebooks-for-javascript-demos-and-prototypes/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/observablehq-notebooks-for-javascript-demos-and-prototypes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/&#34;&gt;ObservableHQ&lt;/a&gt; is a platform being built by &lt;a href=&#34;https://twitter.com/mbostock&#34;&gt;Mike Bostock&lt;/a&gt; (creator of the D3 visualisation library), &lt;a href=&#34;https://twitter.com/jashkenas&#34;&gt;Jeremy Ashkenas&lt;/a&gt; (“Made CoffeeScript, Backbone.js, Underscore and other ragbag” from his &lt;a href=&#34;https://twitter.com/jashkenas&#34;&gt;Twitter bio&lt;/a&gt;) and &lt;a href=&#34;https://twitter.com/tmcw&#34;&gt;Tom MacWright&lt;/a&gt; (creator of the big presentation framework, simple-statistics and documentation.js as well as D3 contributor amongst other things).&lt;/p&gt;

&lt;p&gt;Observable is not just another JavaScript sandbox. It introduces the notebook paradigm to JavaScript projects, those of you familiar with Jupyter notebooks, this is the equivalent with JavaScript instead of Python. It turns out JavaScript is very well-suited to this type of paradigm.&lt;/p&gt;

&lt;p&gt;What’s more, JavaScript developers already have some sort of familiarity with reactivity since most frontend frameworks and view libraries build on it. It’s a different kind of reactivity, in that the library only re-renders or re-computes the section of the application that needs it (cf. Vue, Angular, React).&lt;/p&gt;

&lt;p&gt;You can read original post from Bostock detailing what is now ObservableHQ (then called &lt;code&gt;d3.express&lt;/code&gt;),  &lt;a href=&#34;https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0&#34;&gt;“A better way to code” on Medium&lt;/a&gt;. In that post, the state of the art of why and how of data visualisation is explained. A “better way” is described, the “&lt;em&gt;integrated discovery environment”&lt;/em&gt;, or more simply “notebook”-s.&lt;/p&gt;

&lt;p&gt;That inception post is a 20 minute read, but here’s the &lt;strong&gt;tl;dr:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;visualisations are usually one-offs - “&lt;em&gt;The purpose of visualization is insight, not pictures.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;reactivity is great for building visualisations and discovering insights from data&lt;/li&gt;
&lt;li&gt;visual outputs help massively especially in the exploration phase&lt;/li&gt;
&lt;li&gt;a well-designed notebook system has the benefit of making chunks of code reusable without much effort (or re-packaging as a library)&lt;/li&gt;
&lt;li&gt;web-based notebooks are accessible from anywhere by anyone (if that’s wanted behaviour)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I especially like points 4 and 5, since they’re not a selling point for notebooks in general but for ObservableHQ’s take on the problem. What you end up with is a well-designed web-based reactive notebook environment that’s suited to prototyping.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#features&#34;&gt;Features&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cells-and-reactivity&#34;&gt;Cells and reactivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#display-arbitrary-data-in-arbitrary-ways&#34;&gt;Display arbitrary data in arbitrary ways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-input-of-data-in-arbitrary-ways&#34;&gt;Get input of data in arbitrary ways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#it-feels-like-working-with-a-view-library&#34;&gt;It feels like working with a view library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-of-other-notebooksmodules&#34;&gt;Import of other notebooks/modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sample-projects&#34;&gt;Sample projects&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#run-a-simple-emoji-search&#34;&gt;Run a simple Emoji search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#write-straight-svg-visualisations&#34;&gt;Write straight SVG visualisations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#do-interesting-things-with-web-apis&#34;&gt;Do interesting things with web APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pure-javascript-demos&#34;&gt;Pure JavaScript demos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#css-demos&#34;&gt;CSS demos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-exciting-roadmap&#34;&gt;An exciting roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;h3 id=&#34;cells-and-reactivity&#34;&gt;Cells and reactivity&lt;/h3&gt;

&lt;p&gt;The evaluation model for ObservableHQ is based around cells that react to each other (you can read more about &lt;a href=&#34;https://beta.observablehq.com/@mbostock/introduction-to-notebooks&#34;&gt;notebooks and cells here&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A cell can be pretty much anything. For example, a cell might contain a few paragraphs of text, like this one. Or a cell might contain images, videos, charts, or other graphical and interactive elements. A cell can also contain data structures, like numbers, strings, arrays and objects. Functions, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s what Bostock says about reactivity (find the &lt;a href=&#34;https://beta.observablehq.com/@mbostock/introduction-to-code&#34;&gt;full post here&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A cell that references other cells is re-evaluated automatically whenever the referenced values change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So two things happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can stuff anything in cells&lt;/li&gt;
&lt;li&gt;Your cells have an obvious dependency graph according to which they will re-evaluate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That means you can be sure that for example, if you do a &lt;code&gt;fetch&lt;/code&gt; it will only run once unless you manually get it to re-evaluate or something that the &lt;code&gt;fetch&lt;/code&gt; is dependent on changes. This is in stark contrast to what happens when you’re hacking in JavaScript where each run of the code will cause a &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This kind of reactivity means we don’t have to use precious brain capacity to keep track of what state is in a part of the program. The state is there, spelled out for us in the other cells. So we get faster trial and error (more formally “iteration”) cycles.&lt;/p&gt;

&lt;p&gt;What we also don’t need to worry about is &lt;code&gt;pending&lt;/code&gt; vs &lt;code&gt;resolved&lt;/code&gt; Promises, Observable vs emitted values or what ObservableHQ calls generators. ObservableHQ deals with all these the same way: it gives you the data, not the underlying abstraction, how refreshing not to have to do &lt;code&gt;.then(console.log)&lt;/code&gt; as a sanity check.&lt;/p&gt;

&lt;h3 id=&#34;display-arbitrary-data-in-arbitrary-ways&#34;&gt;Display arbitrary data in arbitrary ways&lt;/h3&gt;

&lt;p&gt;Speaking of &lt;code&gt;console.log&lt;/code&gt;, outputting and observing data doesn’t involve &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;debugger&lt;/code&gt;, due to the programming model, tracking data and changes is straightforward.&lt;/p&gt;

&lt;p&gt;Rendering data and text is as simple as using JavaScript string interpolation with a special template literal tag (namely &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;). That means you can write inline SVGs based on your data much like you would write JSX (granted, there’s a bit more syntactic noise):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&amp;lt;svg&amp;gt;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;someData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&amp;lt;text x=0 y={i * 20}&amp;gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;lt;/text&amp;gt;`&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;lt;/svg&amp;gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;get-input-of-data-in-arbitrary-ways&#34;&gt;Get input of data in arbitrary ways&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;User input&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viewof value = html`&amp;lt;input type=&amp;quot;text&amp;quot; value=&amp;quot;default-value&amp;quot;&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Network resources&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;File upload&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viewof file = html`&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;`
// use the file as audio or something
fileDataUri = URL.createObjectURL(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(see audio waveform example later on)&lt;/p&gt;

&lt;h3 id=&#34;it-feels-like-working-with-a-view-library&#34;&gt;It feels like working with a view library&lt;/h3&gt;

&lt;p&gt;Due to the reactivity and how it handles data, using ObservableHQ feels great, a lot like React/Vue with hot-reloading, except you don’t have dev environment that breaks&lt;/p&gt;

&lt;h3 id=&#34;import-of-other-notebooks-modules&#34;&gt;Import of other notebooks/modules&lt;/h3&gt;

&lt;p&gt;I haven’t used this much (probably because I didn’t build any interesting visualisations), from what I can understand you can import parts of notebooks into another.&lt;/p&gt;

&lt;h2 id=&#34;sample-projects&#34;&gt;Sample projects&lt;/h2&gt;

&lt;h3 id=&#34;run-a-simple-emoji-search&#34;&gt;Run a simple Emoji search&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_3006710316AC061FF0A027D62F4C495878AF5093095B2AF2C7634CDBA1D340A0_1538598277834_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/@hugodf/search-and-download-emoji-from-github&#34;&gt;https://beta.observablehq.com/@hugodf/search-and-download-emoji-from-github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;write-straight-svg-visualisations&#34;&gt;Write straight SVG visualisations&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_3006710316AC061FF0A027D62F4C495878AF5093095B2AF2C7634CDBA1D340A0_1538598311941_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/@hugodf/reddit-contributions-per-week-graph&#34;&gt;https://beta.observablehq.com/@hugodf/reddit-contributions-per-week-graph&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;do-interesting-things-with-web-apis&#34;&gt;Do interesting things with web APIs&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://d2mxuefqeaa7sj.cloudfront.net/s_3006710316AC061FF0A027D62F4C495878AF5093095B2AF2C7634CDBA1D340A0_1538598350347_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/@hugodf/audio-waveforms&#34;&gt;https://beta.observablehq.com/@hugodf/audio-waveforms&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pure-javascript-demos&#34;&gt;Pure JavaScript demos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/@hugodf/recursion-to-wrap-http-requests&#34;&gt;https://beta.observablehq.com/@hugodf/recursion-to-wrap-http-requests&lt;/a&gt;
&lt;a href=&#34;https://beta.observablehq.com/@hugodf/count-something-in-something-else&#34;&gt;https://beta.observablehq.com/@hugodf/count-something-in-something-else&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css-demos&#34;&gt;CSS demos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://beta.observablehq.com/@hugodf/bonus-everyday-situations-you-can-solve-without-javascrip&#34;&gt;https://beta.observablehq.com/@hugodf/bonus-everyday-situations-you-can-solve-without-javascrip&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;an-exciting-roadmap&#34;&gt;An exciting roadmap&lt;/h2&gt;

&lt;p&gt;There are more features that will make ObservableHQ even better like notebook embeds.&lt;/p&gt;

&lt;p&gt;You can find out more on the &lt;a href=&#34;https://talk.observablehq.com/&#34;&gt;ObservableHQ forum&lt;/a&gt; and in the &lt;a href=&#34;https://beta.observablehq.com/collection/@observablehq/changelog&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@headwayio?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Headway&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Headway&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
