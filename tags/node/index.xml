<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node on Code with Hugo</title>
    <link>https://codewithhugo.com/tags/node/</link>
    <description>Recent content in Node on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 20 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codewithhugo.com/tags/node/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to make beautiful, simple CLI apps with Node</title>
      <link>https://codewithhugo.com/how-to-make-beautiful-simple-cli-apps-with-node/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/how-to-make-beautiful-simple-cli-apps-with-node/</guid>
      <description>Channel your inner Sindre Sohrus and ship a beautifully simple CLI app using Node.
Command line apps are a neat way to package repetitive tasks. This will walk you through some tools that are useful to build CLI apps.
 The idea üí° Piping to the command line üöá Dealing with sequential actions ‚ú® Executable JavaScript files ü¶Ö Adding package binaries üì¶ Publishing to npm üöÄ  The idea üí° When merging/rebasing, the file that always seems to cause trouble is the package-lock.</description>
    </item>
    
    <item>
      <title>Testing an Express app with SuperTest, moxios and Jest</title>
      <link>https://codewithhugo.com/testing-an-express-app-with-supertest-moxios-and-jest/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/testing-an-express-app-with-supertest-moxios-and-jest/</guid>
      <description>Testing is a crucial part of the software development process. It helps to catch bugs, avoid regressions and to document the behaviour of a piece of software.
Express is one of the most widespread libraries for building backend applications in JavaScript. What follows is a summary of how to set up an efficient unit testing strategy for such an application as well as a couple of situations you may be faced with when attempting to test.</description>
    </item>
    
    <item>
      <title>Setting up Express and Redis with Docker compose</title>
      <link>https://codewithhugo.com/setting-up-express-and-redis-with-docker-compose/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/setting-up-express-and-redis-with-docker-compose/</guid>
      <description>Redis and Express are tools that provide a simple and clean approach to their problem domains.
The repo is available at: https://github.com/HugoDF/express-redis-docker.
Redis is ‚Äúan open source, in-memory data structure store, used as a database, cache and message broker‚Äù. It‚Äôs as simple and unopinionated as a database as it gets, it‚Äôs known for its performance and simplicity as a key-value store. It has great flexibility and can also be used as a message queue, circular buffer (and pretty much anything else a developer can come up with short of a relational database).</description>
    </item>
    
    <item>
      <title>Using ES6 classes for Sequelize 4 models</title>
      <link>https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/</guid>
      <description>The ES2015 or ES6 specification introduced class to JavaScript. Libraries like React went from React.createClass to class MyComponent extends React.Component, ie went from rolling their own constructor to leveraging a language built-in to convey the programmer‚Äôs intent.
For a Node.js web application‚Äôs persistence layer, a few databases come to mind like MongoDB (possibly paired with mongoose), or a key-value store like Redis.
To run a relational database with a Node application, Sequelize, ‚ÄúAn easy-to-use multi SQL dialect ORM for Node.</description>
    </item>
    
  </channel>
</rss>