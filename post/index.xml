<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Code with Hugo</title>
    <link>https://codewithhugo.com/post/</link>
    <description>Recent content in Posts on Code with Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codewithhugo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In simple terms: code on the backend, frontend and how they interact</title>
      <link>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/in-simple-terms-code-on-the-backend-frontend-and-how-they-interact/</guid>
      <description>A look at the shifting boundaries of the web development stack
This was originally posted as an answer on Quora: How do frontend code and backend code interact with each other?
Let’s start with quick definitions:
Frontend All things the browser can read, display and/or run. This means HTML, CSS and JavaScript.
HTML (Hypertext Markup Language) tells the browser “what” content is, eg. “heading”, “paragraph”, “list”, “list item”.
CSS (Cascading Style Sheets) tells the browser how to display elements eg.</description>
    </item>
    
    <item>
      <title>First-class and Higher Order Functions: Effective Functional JavaScript</title>
      <link>https://codewithhugo.com/first-class-and-higher-order-functions-effective-functional-javascript/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/first-class-and-higher-order-functions-effective-functional-javascript/</guid>
      <description>Functions: the killer JavaScript feature we never talk about.
JavaScript is a very in-demand language today. It runs in a lot of places from the browser to embedded systems and it brings a non-blocking I/O model that is faster than others for some types of applications. What really sets JavaScript apart from the rest of scripting languages is its highly functional nature.
 JavaScript has more in common with functional languages like Lisp or Scheme than with C or Java.</description>
    </item>
    
    <item>
      <title>10 minute JavaScript: Library development in ES6 with Babel, Mocha and npm scripts</title>
      <link>https://codewithhugo.com/10-minute-javascript-library-development-in-es6-with-babel-mocha-and-npm-scripts/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/10-minute-javascript-library-development-in-es6-with-babel-mocha-and-npm-scripts/</guid>
      <description>JavaScript has a thriving ecosystem of libraries delivered as packages on npm. Node has a high degree of compatibility with ES6 but it doesn’t have some features yet, namely import. This means that if we want to distribute useable packages over npm and we want to be writing ES6, we have to transpile back to ES5.
We’ll be setting up a project that allows us to write ES6, and distribute it in ES5 (with Babel) and to test it with Mocha, all through npm scripts.</description>
    </item>
    
    <item>
      <title>Recursion in JavaScript with ES6, destructuring and rest/spread</title>
      <link>https://codewithhugo.com/recursion-in-javascript-with-es6-destructuring-and-rest/spread/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/recursion-in-javascript-with-es6-destructuring-and-rest/spread/</guid>
      <description>The latest ECMA standard for JavaScript (ECMAScript 6) makes JavaScript more readable by encouraging a more declarative style with functional constructs and new operators.
Destructuring One of my favourite ES6 features is destructuring. It allows you to extract data from one variable to another by using structure. For arrays this means for example:
var [ first, second ] = [ 1, 2, 3, 4 ]; // first: 1 // second: 2  There’s more you can do, like skip some members of the array on the right-hand side of the operation.</description>
    </item>
    
    <item>
      <title>Avoiding falsy values in JavaScript arrays</title>
      <link>https://codewithhugo.com/avoiding-falsy-values-in-javascript-arrays/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/avoiding-falsy-values-in-javascript-arrays/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: use &lt;code&gt;Array.filter(Boolean)&lt;/code&gt; to filter out falsy values and avoid errors.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Animations: CSS vs JavaScript</title>
      <link>https://codewithhugo.com/animations-css-vs-javascript/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/animations-css-vs-javascript/</guid>
      <description>When should you use JavaScript when you can use CSS? This post was sparked by a question I answered on Quora: Which is better to use, CSS or JS?
The web frontend is built with the triumvirate of HTML, CSS and JavaScript (see “Backend code, frontend code and how they interact” for more details): HTML says what things are, CSS how they look and JavaScript does all the things the other two can’t.</description>
    </item>
    
    <item>
      <title>AVA, low-config testing for JavaScript</title>
      <link>https://codewithhugo.com/ava-low-config-testing-for-javascript/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/ava-low-config-testing-for-javascript/</guid>
      <description>A JavaScript testing library for 2017
AVA is a Futuristic JavaScript test runner.
Some of its best features are:
 it works out of the box, no need to specify a blob for test files or add Babel hooks
 it’s runs tests in parallel, this stops you from using global state and runs faster
 the tests are async by default
  I quite like AVA since I can just drop it in and reap benefits without too much hassle.</description>
    </item>
    
    <item>
      <title>Closures, Partial Application and Currying: Effective Functional JavaScript</title>
      <link>https://codewithhugo.com/closures-partial-application-and-currying-effective-functional-javascript/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/closures-partial-application-and-currying-effective-functional-javascript/</guid>
      <description>Spices and other ingredients of a great curry
To use JavaScript to its full potential you have to embrace its strong functional programming base. We’re going to explore some crucial and powerful functional constructs: closures, partial application and currying that make JavaScript terse yet understandable.
The basics Functional programming is a programming paradigm that follows a more mathematical computation model. Let’s go through some basics to make your JavaScript more functional.</description>
    </item>
    
    <item>
      <title>Why CSS is hard</title>
      <link>https://codewithhugo.com/why-css-is-hard/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/why-css-is-hard/</guid>
      <description>Things we’re not used to tend to be harder
I’m a developer, and I CSS. I probably have written more CSS than I have written Java, Ruby, PHP, Python and JavaScript combined.
Being a front-end developer is a dying art. By front-end I don’t mean ES6, Babelifyied React SPAs. I mean meat and potatoes: “here’s a design, turn it into a website please”.
CSS doesn’t get the love it deserves in the developer crowd.</description>
    </item>
    
    <item>
      <title>Learn git even if you don’t code</title>
      <link>https://codewithhugo.com/learn-git-even-if-you-dont-code/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codewithhugo.com/learn-git-even-if-you-dont-code/</guid>
      <description>The tools we wield define us, git is the one tool all developers use Git is a ubiquitous version control tool. The way it works tightly correlates with software engineering and the mindsets of developers. It was purpose-built and designed to be used for the development of the Linux Kernel, one of the largest software projects that’s depended on by millions of developers.
Your editing workflow is painful because it’s not version-controlled As part of a team, your editing workflow probably consists of sending a file back and forth for review, comment and amendments.</description>
    </item>
    
  </channel>
</rss>